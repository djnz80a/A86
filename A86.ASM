
;
;
;TODO:	check error when reading/writing file (ERR1/ERR3)
;

	ORG	100H

IMAGE_BASE EQU	00400000H

LINESIZE EQU	1024

R.BUF	EQU	2000H;1000H	;buffer for read
W.BUF	EQU	2000H;800H	;buffer for write

W.LBL	EQU	100H;6000H;8000H	;label

EOM	EQU	0FF00H	;0E000H	;end of memory

	MOV	AX,CS
	MOV	DS,AX
	MOV	ES,AX

	MOV	AH,4AH		;realloc
	MOV	BX,2000H
	INT	21H
	JNB	REALLOC_OK

	MOV	AH,9
	MOV	DX,EMES_REALLOC
	INT	21H

	MOV	AX,4C01H
	INT	21H

EMES_REALLOC:
	DB	'Realloc failed.',0DH,0AH,'$'


REALLOC_OK:
	CLI
	MOV	AX,CS
	MOV	SS,AX
	MOV	SP,0FFF0H	;0FF00H
	STI
	CLD

	MOV	AX,CS
	ADD	AX,1000H
	MOV	[LBL_SEG],AX


	MOV	SI,0080H
	XOR	AX,AX
	MOV	AL,[SI]
	INC	SI
	ADD	SI,AX
	MOV	[SI],AH

	MOV	SI,0082H
	MOV	DI,FILE1
	CALL	STRCPY

	XOR	AX,AX
	MOV	[FLG.1],AL
	MOV	[FLG.2],AL
	MOV	[FLG.3],AL

	MOV	CL,0
	MOV	[FLG.1],CL

	MOV	SI,FILE1
	MOV	DI,FILE2
	CALL	STRCPY

	MOV	SI,FILE1
	MOV	DI,STR_ASM
	CALL	STRCAT

	MOV	SI,FILE2
	MOV	DI,STR_COM
	CALL	STRCAT

I3:
	MOV	DX,MES1
	CALL	DOS09

	XOR	AL,AL
	MOV	[F.TYPE],AL

	MOV	SI,0081H
SW:	MOV	AL,[SI]
	INC	SI
	OR	AL,AL
	JE	SW90

	CMP	AL,'/'
	JNE	SW
	MOV	AL,[SI]
	INC	SI
	CMP	AL,'3'
	JNE	SW.10
	MOV	AL,0FFH
	MOV	[FLG.386],AL
	MOV	[FLG.DWORD],AL
	JMP	SW

SW.10:	CMP	AL,'L'
	JNE	SW.20
	MOV	AL,0FFH
	MOV	[FLG.L],AL
	JMP	SW

SW.20:	CMP	AL,'P'
	JNE	SW.30
	MOV	AL,0FFH
	MOV	[FLG.P],AL
	JMP	SW

SW.30:
	CMP	AL,'D'		;write debug symbol
	JNE	SW.40
	MOV	AL,0FFH
	MOV	[FLG.D],AL
	JMP	SW

SW.40:
	JMP	SW

SW90:
	MOV	DX,FILE1
	MOV	AX,3D00H	;open
	INT	21H
	JB	ERR0
	MOV	[HDL],AX

	MOV	DX,FILE2
	MOV	CX,0
	MOV	AX,3C00H	;create
	INT	21H
	JB	ERR2		;ERR0
	MOV	[HDL2],AX

	MOV	AL,0FFH
	MOV	[FLAG_FILE2],AL

	MOV	BX,W.BUF
	MOV	[W.LEFT],BX
	MOV	BX,USRDMA+R.BUF
	MOV	[W.PNT],BX

	MOV	BX,LBL.PNT.TOP
	MOV	CX,200H+200H
INIT50:	XOR	AL,AL
	MOV	[BX],AL
	INC	BX
	LOOP	INIT50

MAIN:	MOV	AL,1
	MOV	[PASS],AL
	CALL	ASM

	CALL	PUT.L

	MOV	AL,2
	MOV	[PASS],AL
	CALL	ASM

	MOV	BX,W.BUF
	MOV	DX,[W.LEFT]
	SUB	BX,DX
	JE	I10

	MOV	CX,BX
	MOV	DX,USRDMA+R.BUF
	MOV	BX,[HDL2]
	MOV	AX,4000H	;write
	PUSH	CX
	INT	21H
	POP	CX
	JB	ERR3

	CMP	AX,CX
	JNE	ERR3

;	JB	ERR3
I10:


I12:
	CALL	PUT_DEBUG

	CALL	WRITE_COFF_DEBUG_HEADER

	MOV	BX,[HDL2]
	MOV	AX,3E00H	;close
	INT	21H
	JB	ERR3

	XOR	AL,AL
	MOV	[FLAG_FILE2],AL

	MOV	DX,MES10
	CALL	DOS09

	MOV	EBX,[O.ADR1]
	DEC	EBX
	PUSH	EBX
	SHR	EBX,10H
	MOV	AL,BH
	CALL	PUTH1
	MOV	AL,BL
	CALL	PUTH1

	POP	EBX
	MOV	AL,BH
	CALL	PUTH1
	MOV	AL,BL
	CALL	PUTH1

	CALL	CRLF

	MOV	DX,MES11
	CALL	DOS09

	MOV	BX,[LBL.NO]
	CALL	PUTDC


	CALL	CRLF

	CALL	PUT.L

EXIT:
	MOV	AH,4CH
	INT	21H

;
WRITE_COFF_DEBUG_HEADER:

	PUSH	ES

	MOV	AL,[FLG.D]
	OR	AL,AL
	JE	WRITE_COFF_DEBUG_HEADER.R


	PUSH	DS
	POP	ES

	MOV	AX,4200H
	MOV	BX,[HDL2]
	XOR	CX,CX
	MOV	DX,00CCH	;PointerToSymbolTable
	;MOV	DX,00D0H	;NumberOfSymbol
	INT	21H

	MOV	EAX,[COFF_SYMBOLS_HEADER_OFF]
	ADD	EAX,20H
;		mov	eax,0
	MOV	[COFF_BUF],EAX
	XOR	EAX,EAX
	MOV	AX,[LBL.NO]
;		mov ax,0
	MOV	[COFF_BUF+4],AX

	MOV	AX,4000H
	MOV	BX,[HDL2]
	MOV	CX,4+4
	MOV	DX,COFF_BUF
	INT	21H

	MOV	BX,[PNT2]
	PUSH	BX
	MOV	SI,STR_IMAGE_DEBUG_DIRECTORY	;ENTRY_DEBUG
	MOV	DI,WORK2+1
	CALL	STRCPY

	MOV	AL,25		;len
	MOV	[WORK2],AL
	MOV	BX,WORK2
	MOV	[PNT2],BX
	CALL	SRCHL
	POP	BX
	MOV	[PNT2],BX
	JNB	WRITE_COFF_DEBUG_HEADER.10

	MOV	DX,EMES_NO_DEBUG_ENTRY
	CALL	DOS09

	JMP	WRITE_COFF_DEBUG_HEADER.R

WRITE_COFF_DEBUG_HEADER.10:
	MOV	EAX,[VAL1]
	PUSHAD
	PUSH	EAX
	SHR	EAX,10H
	MOV	BX,AX
	CALL	PUTH2

	POP	EAX
	MOV	BX,AX
	CALL	PUTH2
	POPAD

	SUB	EAX,IMAGE_BASE	;00400000H
	MOV	[IMAGE_DEBUG_DIRECTORY_OFF],EAX

	MOV	ECX,EAX
	MOV	DX,AX
	SHR	ECX,10H

	MOV	AX,4200H
	MOV	BX,[HDL2]
	INT	21H

	;MOV	EAX,0		;size
	MOV	EAX,[PUT_DEBUG_LONGSTR_TOTAL_SIZE]
	ADD	EAX,4
	MOV	ECX,EAX

	XOR	EAX,EAX
	XOR	EDX,EDX
	MOV	AX,[LBL.NO]
	MOV	DX,AX
	SHL	EAX,4
	ADD	EAX,EDX
	ADD	EAX,EDX		;*12h

	ADD	EAX,ECX

	ADD	EAX,20H		;for symbols_header

	MOV	EDI,IMAGE_DEBUG_DIRECTORY
	MOV	[EDI+10H],EAX	;SizeOfData

	MOV	EAX,[COFF_SYMBOLS_HEADER_OFF]
	MOV	[EDI+18H],EAX	;PointerToRawData

	MOV	AX,4000H	;write
	MOV	BX,[HDL2]
	MOV	DX,IMAGE_DEBUG_DIRECTORY	;EDX,USRDMA
	MOV	CX,1CH	;20H
	INT	21H


;#6 IMAGE_DIRECTORY_ENTRY_DEBUG

	MOV	AX,4200H	;seek
	MOV	BX,[HDL2]
	XOR	CX,CX
	MOV	DX,0168H
	INT	21H

	MOV	EAX,[IMAGE_DEBUG_DIRECTORY_OFF]
	MOV	[COFF_BUF],EAX
	MOV	EAX,1CH*1
	MOV	[COFF_BUF+4],EAX

	MOV	AX,4000H	;write
	MOV	BX,[HDL2]
	MOV	CX,4+4
	MOV	DX,COFF_BUF
	INT	21H

WRITE_COFF_DEBUG_HEADER.R:
	POP	ES
	RET
;
COFF_BUF:
	DS	100H

STR_IMAGE_DEBUG_DIRECTORY:
	;DB	'__ENTRY_DEBUG__',0
	DB	'__IMAGE_DEBUG_DIRECTORY__',0


EMES_NO_DEBUG_ENTRY:
	DB	'Not found __IMAGE_DEBUG_DIRECTORY__',0dh,0ah,'$'



;ENTRY_DEBUG_HEADER:
IMAGE_DEBUG_DIRECTORY:
	DD	0	;Characteristics
	DD	529037AEH	;TimeDateStamp
	DW	0	;MajorVersion
	DW	0	;MinorVersion
	DD	1;IMAGE_DEBUG_TYPE_COFF	;Type
;+10
	DD	0;_DEBUG_NAME_END-_DEBUG_HEADER1	;SizeOfData;

	DD	0	;AddressOfRawData
;+18
	DD	0;_DEBUG_HEADER1-BASE	;PointerToRawData


;
;
PUT_DEBUG:
	PUSH	ES
	MOV	AX,[LBL_SEG]
	MOV	ES,AX

;	MOV	AL,[FLG.L]
;	OR	AL,AL
;	JE	PUT_DEBUG.E

	MOV	AL,[FLG.D]
	OR	AL,AL
	JE	PUT_DEBUG.E

	MOV	DX,[LBL.NO]
	OR	DX,DX
	JE	PUT_DEBUG.E


	;seek

;	CALL	FLUSH_W.BUF

	CALL	INIT_W.BUF

;	MOV	AX,4000H	;truncate
;	MOV	BX,[HDL2]
;	MOV	CX,0
;	MOV	DX,0
;	INT	21H

	MOV	BX,[HDL2]
	MOV	CX,0
	MOV	DX,0
	MOV	AX,4201H	;seek
	;MOV	AX,4202H
	INT	21H		;>dx:ax

	SHL	EDX,10H
	MOV	DX,AX

	PUSHAD
	MOV	EBX,EDX
	CALL	PUTH2
	POPAD

PUT_DEBUG.ALIGN.1:
	;TEST	DX,0FH
	MOV	AX,DX
	AND	AX,1000H-1	;FILE_ALIGN-1
	JE	PUT_DEBUG.ALIGN.2

	MOV	AL,'%'
	CALL	PUT_DEBUG_CHR
	INC	EDX
	JMP	PUT_DEBUG.ALIGN.1
PUT_DEBUG.ALIGN.2:

;	MOV	AL,'#'
;	CALL	PUT_DEBUG_CHR
;	CALL	PUT_DEBUG_CHR
;	MOV	AL,'1'
;	CALL	PUT_DEBUG_CHR
;	CALL	PUT_DEBUG_CHR

	XOR	EAX,EAX
	MOV	AX,[LBL.NO]
	MOV	[COFF_SYMBOLS_HEADER],EAX
	MOV	AX,20H
	MOV	[COFF_SYMBOLS_HEADER+4],EAX

	MOV	[COFF_SYMBOLS_HEADER_OFF],EDX

	MOV	SI,COFF_SYMBOLS_HEADER
	MOV	CL,20H
	CALL	PUT_DEBUG_WRITE_BUF

	ADD	EDX,20H

	PUSH	EDX
	XOR	EAX,EAX
	XOR	EDX,EDX
	MOV	AX,[LBL.NO]
	MOV	DX,AX
	SHL	EAX,4
	ADD	EAX,EDX
	ADD	EAX,EDX		;eax*=12h
	POP	EDX
	ADD	EAX,EDX

		mov	eax,4
	MOV	[PUT_DEBUG_LONGSTR_PNT],EAX

	XOR	EAX,EAX
	MOV	[PUT_DEBUG_LONGSTR_TOTAL_SIZE],EAX



	MOV	DX,[LBL.NO]
	MOV	BX,W.LBL
PUT_DEBUG.0:
	MOV	CH,ES:[BX]		;len	es:= 26h
	INC	BX

	INC	BX		;link pnt skip
	INC	BX

	CMP	CH,8
	JBE	PUT_DEBUG.SHORT

	XOR	EAX,EAX
	MOV	[COFF_SYMBOL],EAX

	MOV	EAX,[PUT_DEBUG_LONGSTR_PNT]
	MOV	[COFF_SYMBOL+4],EAX

	MOVZX	EAX,CH
	INC	EAX
	ADD	[PUT_DEBUG_LONGSTR_PNT],EAX

	ADD	[PUT_DEBUG_LONGSTR_TOTAL_SIZE],EAX
	JMP	PUT_DEBUG.1

PUT_DEBUG.SHORT:
	XOR	EAX,EAX
	MOV	[COFF_SYMBOL],EAX
	MOV	[COFF_SYMBOL+4],EAX

	PUSH	BX
	PUSH	CX
	PUSH	DX
	PUSH	SI

	MOV	SI,COFF_SYMBOL
PUT_DEBUG.SHORT.1:
	MOV	AL,ES:[BX]
	MOV	[SI],AL
	;CALL	PUT_DEBUG_CHR
	INC	SI
	INC	BX
	DEC	CH
	JNE	PUT_DEBUG.SHORT.1

	POP	SI
	POP	DX
	POP	CX
	POP	BX

PUT_DEBUG.1:
	MOV	AL,ES:[BX]		;string
	;CALL	PUT.L20
	INC	BX
	DEC	CH
	JNE	PUT_DEBUG.1

	MOV	EAX,ES:[BX]	;value
	CMP	EAX,IMAGE_BASE
	JB	PUT_DEBUG.30
	MOV	ESI,[O.ADR1]
	ADD	ESI,10000H	;
	CMP	EAX,ESI
	JNB	PUT_DEBUG.30

	SUB	EAX,IMAGE_BASE	;00400000H
PUT_DEBUG.30:
	MOV	[COFF_SYMBOL+8],EAX

	ADD	BX,4

	MOV	SI,COFF_SYMBOL
	MOV	CL,12h
	CALL	PUT_DEBUG_WRITE_BUF

	;INC	BX
	DEC	DX
	OR	DX,DX
	JNE	PUT_DEBUG.0

;	MOV	AL,'#'
;	CALL	PUT_DEBUG_CHR
;	CALL	PUT_DEBUG_CHR
;	MOV	AL,'2'
;	CALL	PUT_DEBUG_CHR
;	CALL	PUT_DEBUG_CHR
;------- write long strings

	MOV	EAX,[PUT_DEBUG_LONGSTR_TOTAL_SIZE]
	ADD	EAX,4
	CALL	PUT_DEBUG_CHR
	SHR	EAX,8
	CALL	PUT_DEBUG_CHR
	SHR	EAX,8
	CALL	PUT_DEBUG_CHR
	SHR	EAX,8
	CALL	PUT_DEBUG_CHR

PUT_DEBUG.50:


	MOV	DX,[LBL.NO]
	MOV	BX,W.LBL
PUT_DEBUG.52:
	MOV	CH,ES:[BX]		;len	es:= 26h
	INC	BX

	INC	BX		;link pnt skip
	INC	BX

	CMP	CH,8
	JBE	PUT_DEBUG.55

PUT_DEBUG.53:
	MOV	AL,ES:[BX]		;string
	CALL	PUT_DEBUG_CHR
	INC	BX
	DEC	CH
	JNE	PUT_DEBUG.53

	MOV	AL,0
	CALL	PUT_DEBUG_CHR

	JMP	PUT_DEBUG.60

PUT_DEBUG.55:
	INC	BX
	DEC	CH
	JNE	PUT_DEBUG.55

PUT_DEBUG.60:
	ADD	BX,4		;value

	;INC	BX
	DEC	DX
	OR	DX,DX
	JNE	PUT_DEBUG.52

	MOV	AL,0
	CALL	PUT_DEBUG_CHR
	CALL	PUT_DEBUG_CHR
	CALL	PUT_DEBUG_CHR
	CALL	PUT_DEBUG_CHR

	CALL	FLUSH_W.BUF
PUT_DEBUG.E:
	POP	ES
	RET

;ch	len
;es:bx	name
;
PUT_DEBUG.WRITE_LONGSTR:
	PUSH	CX

	XOR	EAX,EAX
	MOV	AL,CH
	INC	AX
	ADD	[PUT_DEBUG_LONGSTR_PNT],EAX

PUT_DEBUG.WRITE_LONGSTR.10:
	MOV	AL,ES:[BX]
	PUSH	BX
	CALL	PUT_DEBUG_CHR
	POP	BX
	INC	BX
	DEC	CH
	JNE	PUT_DEBUG.WRITE_LONGSTR.10

	MOV	AL,0
	CALL	PUT_DEBUG_CHR

	POP	CX
	RET

IMAGE_DEBUG_DIRECTORY_OFF:	DS	4
COFF_SYMBOLS_HEADER_OFF:	DS	4
PUT_DEBUG_LONGSTR_PNT:		DS	4
PUT_DEBUG_LONGSTR_TOTAL_SIZE:	DS	4


;
PUT_DEBUG_WRITE_BUF:
	MOV	AL,[SI]
	CALL	PUT_DEBUG_CHR
	INC	SI
	DEC	CL
	JNE	PUT_DEBUG_WRITE_BUF

	RET


COFF_SYMBOLS_HEADER:
	DD	4	;NumberOfSymbols
	DD	-1;_SYM1-_DEBUG_HEADER1	;LvaToFirstSymbol
	DD	0	;NumberOfLinenumbers
	DD	0	;LvaToFirstLinenumber

	DD	0;_TEXT_RVA	;RvaToFirstByteOfCode
	DD	0;_TEXT_END-1-_TEXT+_TEXT_RVA	;RvaToLastByteOfCode
	DD	0;_DATA_RVA	;RvaToFirstByteOfData
	DD	0;_DATA_END-1-_DATA+_DATA_RVA	;RvaToLastByteOfData

COFF_SYMBOL:
	DB	'12345678'	;ShortName
	DD	0	;Value
	DW	1;-2	;SectionNumber
	DW	0	;Type
	DB	2	;StorageClass
	DB	0	;NumberOfAuxSymbols


;

PUT_DEBUG_CHR:
	PUSHAD
	CALL	PUTCHR
	POPAD
	RET

;
INIT_W.BUF:
	MOV	BX,W.BUF
	MOV	[W.LEFT],BX
	MOV	BX,USRDMA+R.BUF
	MOV	[W.PNT],BX
	RET
;
FLUSH_W.BUF:
	MOV	BX,W.BUF
	MOV	DX,[W.LEFT]
	SUB	BX,DX
	JE	FLUSH_W.BUF.R	;I10

	MOV	CX,BX
	MOV	DX,USRDMA+R.BUF
	MOV	BX,[HDL2]
	MOV	AX,4000H	;write
	PUSH	CX
	INT	21H
	POP	CX
	JB	ERR3

	CMP	AX,CX
	JNE	ERR3
FLUSH_W.BUF.R:
	CALL	INIT_W.BUF
	RET


;
;
;
PUT.L:
	PUSH	ES
	MOV	AX,[LBL_SEG]
	MOV	ES,AX

	MOV	AL,[FLG.L]
	OR	AL,AL
	JE	PUT.L.E

	MOV	DX,[LBL.NO]
	OR	DX,DX
	JE	PUT.L.E


	MOV	BX,W.LBL
PUT.L0:	MOV	CH,ES:[BX]		;len	es:= 26h
	INC	BX
	INC	BX		;link pnt skip
	INC	BX

PUT.L1:	MOV	AL,ES:[BX]		;string
	CALL	PUT.L20
	INC	BX
	DEC	CH
	JNE	PUT.L1

	MOV	AL,09H
	CALL	PUT.L20
	MOV	AL,ES:[BX]		;value

;	PUSH	AX
;	INC	BX
;	MOV	AL,[BX]
;	CALL	PUT.L30
;	POP	AX
;	CALL	PUT.L30
	MOV	AL,ES:[BX+3]
	CALL	PUT.L30
	MOV	AL,ES:[BX+2]
	CALL	PUT.L30
	MOV	AL,ES:[BX+1]
	CALL	PUT.L30
	MOV	AL,ES:[BX]
	CALL	PUT.L30
	ADD	BX,3

	MOV	AL,0DH
	CALL	PUT.L20
	MOV	AL,0AH
	CALL	PUT.L20
	INC	BX
	DEC	DX
	OR	DX,DX
	JNE	PUT.L0

PUT.L.E:
	POP	ES
	RET

;
;
;
PUT.L20:
	PUSH	BX
	PUSH	DX
	PUSH	CX
;	CALL	PUTCHR
	CALL	DOS02
	POP	CX
	POP	DX
	POP	BX
	RET


PUT.L30:
	PUSH	AX
	SHR	AL,4
	CALL	PUT.L35
	POP	AX
PUT.L35:
	AND	AL,0FH
	CMP	AL,10
	JB	PUT.L36
	ADD	AL,7
PUT.L36:
	ADD	AL,'0'
	JMP	PUT.L20

;

MES10:	DB	'end address = $'
MES11:	DB	'label(s)    = $'

;

ASM:
	XOR	AL,AL
	MOV	[LOAD.F],AL

	MOV	BX,FILE1+80
	MOV	[FCB],BX
	MOV	SI,FILE1
	MOV	DI,FILE1+80
	CALL	STRCPY

	MOV	CX,0
	MOV	DX,0
	MOV	AX,4200H	;seek
	MOV	BX,[HDL]
	INT	21H


PNO:	MOV	DX,MES2
	CALL	DOS09
	MOV	AL,[PASS]
	ADD	AL,'0'
	CALL	DOS02
	CALL	CRLF

	MOV	EBX,0000H
	MOV	[O.ADR1],EBX
	MOV	EBX,0000H
	MOV	[O.ADR2],EBX
	MOV	[O.BYTE],EBX

	MOV	BX,1
	;
	MOV	[LIN.NO],BX

	MOV	BX,W.LBL
	MOV	[LBL.NX],BX
	MOV	AL,[PASS]
	DEC	AL
	JNE	PNO2
	MOV	BX,0
	MOV	[LBL.NO],BX
	MOV	[ERR.NO],BX
PNO2:
	MOV	BX,0
	MOV	[S.LEFT],BX
	XOR	AL,AL
	MOV	[FL.END],AL

MAIN01:
	MOV	AL,[FLG.386]
	MOV	[FLG2.386],AL
	MOV	AL,[FLG.DWORD]
	MOV	[FLG2.DWORD],AL
	MOV	AL,[FLG.SHORT]
	MOV	[FLG2.SHORT],AL
	MOV	AL,1
	MOV	[PRE_SIZE],AL
	MOV	AL,0
	MOV	[PRE_SEG],AL
	MOV	[FLG2.FAR],AL

	;test>
;	CALL	GETLIN
;	CALL	PUTLIN
;	MOV	AL,[L.DATA]
;	CMP	AL,1AH
;	JNE	MAIN01
;	RET
	;<


	MOV	[STACK],SP
	CALL	GETLIN
	MOV	AL,[FLG.P]
	OR	AL,AL
	JE	MAIN01.10
	CALL	PUTLIN
MAIN01.10:
	MOV	AL,[L.DATA]
	CMP	AL,1AH
	JNE	M10
MAIN02:
	CALL	FCBDEC
	JB	_RET
;	RET

	JMP	MAIN01

;

M10:
	MOV	SI,L.DATA
	MOV	AL,[SI]
	CMP	AL,09H
	JE	MAIN10
	CMP	AL,' '
	JE	MAIN10
	OR	AL,AL
	JE	MAIN50
	CMP	AL,';'
	JE	MAIN50
;

M11:	CALL	UPPER
	CMP	AL,' '+1
	JB	ERR4
	CMP	AL,':'
	JE	ERR4
;
	MOV	BX,WORK1
	XOR	AL,AL
	MOV	[BX],AL
	INC	BX
	MOV	CH,40+2
	MOV	AL,' '
M10.1:	MOV	[BX],AL
	INC	BX
	DEC	CH
	JNE	M10.1
	MOV	DX,WORK1+1
	MOV	CH,40
LBLS10:	MOV	AL,[SI]
	CALL	UPPER
	CMP	AL,':'
	JE	LBLS17
	CMP	AL,09H
	JE	L.EQU
	CMP	AL,' '
	JE	L.EQU
;
	CMP	AL,';'
	JE	ERR4
	CALL	LDDXA
	INC	SI
	INC	DX
	DEC	CH
	JNE	LBLS10

LBLS15:	MOV	AL,[SI]
	CALL	UPPER
	CMP	AL,':'
	JE	LBLS17
	CMP	AL,09H
	JE	L.EQU
	CMP	AL,' '
	JE	L.EQU
	CMP	AL,' '+1
	JB	ERR4
;
	CMP	AL,';'
	JE	ERR4
	INC	SI
	JMP	LBLS15

LBLS17:	MOV	AL,40
	SUB	AL,CH
	MOV	[WORK1],AL
	JMP	LBLS20

;--------

L.EQU:	MOV	AL,40
	SUB	AL,CH
	MOV	[WORK1],AL
	CALL	S.SKIP
	JE	ERR6
	MOV	CL,'E'
	CALL	L.EQU2
	MOV	CL,'Q'
	CALL	L.EQU2
	MOV	CL,'U'
	CALL	L.EQU2

;
	MOV	AL,[SI]
	INC	SI
	CMP	AL,09H
	JE	L.EQU1
	CMP	AL,' '
	JE	L.EQU1
	JMP	SUBCOM
L.EQU1:
	CALL	S.SKP2
	JE	ERR6
	PUSH	DX
	CALL	GET.NO
	POP	DX
;
	DEC	SI
	CALL	S.SKIP
	JNE	ERR6
	DEC	SI
	MOV	BX,DX
	MOV	EDX,[VAL1]
	MOV	[BX],EDX
	JMP	LBLS25

L.EQU2:	MOV	AL,[SI]
	INC	SI
	CALL	UPPER
	CMP	AL,CL
	JE	_RET
	POP	BX
	JMP	SUBCOM

LBLS20:
	MOV	BX,DX
	MOV	EDX,[O.ADR1]
;	AND	EDX,0FFFFH	;#
	MOV	[BX],EDX

;

LBLS25:	MOV	BX,WORK1
	MOV	[PNT2],BX
	CALL	SRCHL
	JB	LBLS32

	MOV	AL,[PASS]
	DEC	AL
	JE	ERR5		;Multiply defined label
	OR	AL,AL

;LBLS30:
	MOV	BX,[PNT2]	;set again
	PUSHF
	PUSH	AX
	JMP	LBLS35

LBLS32:	PUSHF
	PUSH	AX
	MOV	BX,[LBL.NX]	;newly set
LBLS35:	XCHG	DX,BX		;DX=BX
;

	CALL	SET.LBL

;

	POP	AX
	POPF
	JNB	LBLS36		;if set again
	MOV	[LBL.NX],DX
	MOV	BX,[LBL.NO]
	INC	BX
	MOV	[LBL.NO],BX
	MOV	BX,[LBL.NX]
	MOV	DX,EOM		;0D000H end of memory
	SUB	BX,DX
	JNB	ERR8
LBLS36:
;------------------------

MAIN10:	MOV	BX,WORK2
	MOV	AL,' '
	MOV	[BX],AL
	INC	BX
	MOV	[BX],AL
	INC	BX
	MOV	[BX],AL
	INC	BX
	MOV	[BX],AL

	INC	BX
	MOV	[BX],AL
	INC	BX
	MOV	[BX],AL

	CALL	S.SKIP
	JE	MAIN50
	MOV	DX,WORK2
	MOV	CH,7
MAIN11:	MOV	AL,[SI]
	CALL	UPPER
	CMP	AL,'A'
	JNB	MAIN12
	OR	AL,AL
	JE	MAIN15
	CMP	AL,09H
	JE	MAIN15
	CMP	AL,' '
	JE	MAIN15
	CMP	AL,';'
	JE	MAIN15
	JMP	ERR6
MAIN12:	CMP	AL,'Z'+1
	JNB	ERR6
	CALL	LDDXA
	INC	SI
	INC	DX
	DEC	CH
	JNE	MAIN11
	JMP	ERR6
MAIN15:	MOV	AL,7
	SUB	AL,CH
	MOV	[LEN],AL
;
	MOV	BX,WORK2
	MOV	AL,[BX]
	SUB	AL,'A'
	MOV	CH,AL
	ADD	AL,AL
	ADD	AL,CH
	MOV	BH,0
	MOV	BL,AL
	ADD	BX,OP.TBL

	MOV	AL,[BX]
	MOV	CH,AL
	OR	AL,AL
	JE	ERR6
	INC	BX
	MOV	BX,[BX]

OPE03:	PUSH	CX
	MOV	DX,WORK2+1
	MOV	CH,5
OPE05:	CALL	LDADX

	CMP	AL,[BX]
	JNE	OPE10
	INC	BX
	INC	DX
	DEC	CH
	JNE	OPE05
OPE050:	POP	CX
;
OPE06:
;	JMP	[BX]

	MOV	DL,[BX]
	INC	BX
	MOV	DH,[BX]
	XCHG	DX,BX

;	JMP	BX
	PUSH	BX
	RET

;

OPE10:	INC	BX
	INC	BX
OPE11:	INC	BX
	DEC	CH
	JNE	OPE11
	POP	CX
	DEC	CH
	JNE	OPE03
	JMP	ERR6


;

SUBCOM:
;	JMP	ERR6		;

	MOV	SI,L.DATA
	MOV	AL,[SI]
	CMP	AL,'#'
	JNE	ERR6
	INC	SI
	MOV	DX,SUBD1
	MOV	CL,1
SUB1:	PUSH	SI
SUB2:	CALL	LDADX
	OR	AL,AL
	JE	SUB5
	MOV	CH,AL
	MOV	AL,[SI]
	CALL	UPPER
	CMP	AL,CH
	JNE	SUB3
	INC	SI
	INC	DX
	JMP	SUB2
SUB3:	INC	CL
	POP	SI
SUB4:	CALL	LDADX
	INC	DX
	CMP	AL,0FFH
	JE	SUBE
	OR	AL,AL
	JNE	SUB4
	JMP	SUB1

SUB5:	POP	AX	;dummy
	DEC	CL
	JE	SUBI
	DEC	CL
	JE	SUBIF
	DEC	CL
	JE	SUBM
SUBE:	MOV	DX,SUBEM1
	CALL	DOS09
	JMP	ERR6

SUBEM1:	DB	'subcom error!$'

SUBD1:	DB	'INCLUDE',0
	DB	'IF',0
	DB	'MACRO',0
	DB	0FFH

SUBI:	MOV	DX,SUBIM1
	CALL	DOS09

;	MOV	BX,SUBWRK
;
;	MOV	CH,11
;SUBI0:	MOV	AL,20H
;	MOV	[BX],AL
;	INC	BX
;	DEC	CH
;	JNE	SUBI0

	CALL	S.SKIP
	JE	ERR6
	CMP	AL,'<'
	JNE	ERR6
	CALL	S.SKIP
	JE	ERR6
	MOV	DX,SUBWRK
SUBI1:	MOV	AL,[SI]
	INC	SI
;	CMP	AL,'.'
;
	CMP	AL,'>'
	JE	SUBI7
	CALL	DOS02
	CALL	LDDXA
	INC	DX
	JMP	SUBI1
;SUBI5:
;
;SUBI6:	MOV	AL,[SI]
;	INC	SI
;	CMP	AL,'>'
;	JE	SUBI7
;	CALL	DOS02
;	CALL	LDDXA
;	INC	DX
;	JMP	SUBI6
SUBI7:
	XOR	AL,AL
	CALL	LDDXA

	MOV	AL,'/'
	CALL	DOS02
	CALL	CRLF
	MOV	AL,[LOAD.F]
	INC	AL
	MOV	[LOAD.F],AL
	CMP	AL,16
	JE	ERRC	;too many include

	PUSH	SI

	MOV	SI,[FCB]

	MOV	BX,[LIN.NO]
	INC	BX
	MOV	[SI+70],BX

	MOV	AX,[HDL]
	MOV	[SI+72],AX

	PUSH	SI
	MOV	BX,[HDL]
	MOV	CX,0
	MOV	DX,0
	MOV	AX,4201H	;seek
	INT	21H
	POP	SI

	SUB	AX,[S.LEFT]
	SBB	DX,0
	MOV	[SI+74],AX
	MOV	[SI+76],DX

	MOV	BX,[FCB]
	MOV	DX,80
	ADD	BX,DX
	MOV	[FCB],BX

	MOV	SI,SUBWRK
	MOV	DI,[FCB]
	CALL	STRCPY

	XOR	AL,AL
	MOV	[FL.END],AL
	MOV	BX,0
	MOV	[S.LEFT],BX

	MOV	DX,[FCB]
	MOV	AX,3D00H	;open
	INT	21H
	MOV	[HDL],AX

	POP	SI
	JB	ERR0
	MOV	BX,0
	MOV	[LIN.NO],BX

	JMP	MAIN20

;
;
;
SUBM:

SUBIM1:	DB	'LOADING...$'

SUBIF:

SUBENDIF:

IF.FLG:	DS	1

SUBWRK:	DS	16

;*************************************

OP.TBL:	DEFB	8
	DEFW	PNT.A
	DEFB	2
	DEFW	PNT.B
	DEFB	9
	DEFW	PNT.C
	DEFB	13
	DEFW	PNT.D
	DEFB	1
	DEFW	PNT.E
	DEFB	0
	DEFW	0	;F
	DEFB	0
	DEFW	0	;G
	DEFB	0
	DEFW	PNT.H
	DEFB	6
	DEFW	PNT.I
	DEFB	30
	DEFW	PNT.J
	DEFB	0
	DEFW	0	;K
	DEFB	8
	DEFW	PNT.L

	DEFB	7
	DEFW	PNT.M	;M

	DEFB	3
	DEFW	PNT.N
	DEFB	3
	DEFW	PNT.O
	DEFB	10
	DEFW	PNT.P
	DEFB	0
	DEFW	0	;Q
	DEFB	10
	DEFW	PNT.R
	DEFB	16
	DEFW	PNT.S
	DEFB	1
	DEFW	PNT.T	;T
	DEFB	0
	DEFW	0	;U
	DEFB	0
	DEFW	0	;V
	DEFB	0
	DEFW	0	;W
	DEFB	3
	DEFW	PNT.X
	DEFB	0
	DEFW	0	;Y
	DEFB	0
	DEFW	0	;Z

PNT.A:	DB	'DD   '
	DW	C.ADD
	DB	'DC   '
	DW	C.ADC
	DB	'ND   '
	DW	C.AND
	DB	'AA   '
	DW	C.AAA
	DB	'AS   '
	DW	C.AAS
	DB	'AM   '
	DW	C.AAM
	DB	'AD   '
	DW	C.AAD
	DB	'LIGN '
	DW	C.ALIGN

PNT.B:


PNT.C:	DB	'ALL  '
	DW	C.CALL
	DB	'LC   '
	DW	C.CLC
	DB	'LD   '
	DW	C.CLD
	DB	'LI   '
	DW	C.CLI
	DB	'MC   '
	DW	C.CMC
	DB	'MPSB '
	DW	C.CMPSB
	DB	'MPSW '
	DW	C.CMPSW
	DB	'MPSD '
	DW	C.CMPSD
	DB	'MP   '
	DW	C.CMP
	DB	'BW   '
	DW	C.CBW
	DB	'CWD  '
	DW	C.CWD

PNT.D:	DB	'EC   '
	DW	C.DEC
	DB	'AA   '
	DW	C.DAA
	DB	'AS   '
	DW	C.DAS
	DB	'IV   '
	DW	C.DIV
	DB	'B    '
	DW	C.DB
	DB	'W    '
	DW	C.DW
	DB	'D    '
	DW	C.DD
	DB	'S    '
	DW	C.DS
	DB	'M    '
	DW	C.DM
	DB	'EFB  '
	DW	C.DB
	DB	'EFW  '
	DW	C.DW
	DB	'EFS  '
	DW	C.DS
	DB	'EFM  '
	DW	C.DM

PNT.E:	DB	'ND   '
	DW	C.END


PNT.H:

PNT.I:	DB	'NC   '
	DW	C.INC
	DB	'MUL  '
	DW	C.IMUL
	DB	'DIV  '
	DW	C.IDIV
	DB	'N    '
	DW	C.IN
	DB	'NT   '
	DW	C.INT
	DB	'RET  '
	DW	C.IRET


PNT.J:	DB	'MP   '	;1
	DW	C.JMP
	DB	'O    '
	DW	C.JO
	DB	'NO   '
	DW	C.JNO
	DB	'B    '
	DW	C.JB
	DB	'NAE  '	;5
	DW	C.JNAE
	DB	'AE   '
	DW	C.JAE
	DB	'NB   '
	DW	C.JNB
	DB	'NB   '
	DW	C.JNB
	DB	'E    '
	DW	C.JE
	DB	'Z    '	;10
	DW	C.JZ
	DB	'NE   '
	DW	C.JNE
	DB	'NZ   '
	DW	C.JNZ
	DB	'BE   '
	DW	C.JBE
	DB	'NA   '
	DW	C.JNA
	DB	'A    '	;15
	DW	C.JA
	DB	'NBE  '
	DW	C.JNBE
	DB	'S    '
	DW	C.JS
	DB	'NS   '
	DW	C.JNS
	DB	'P    '
	DW	C.JP
	DB	'NP   '	;20
	DW	C.JNP
	DB	'PO   '
	DW	C.JPO
	DB	'L    '
	DW	C.JL
	DB	'NGE  '
	DW	C.JNGE
	DB	'GE   '
	DW	C.JGE
	DB	'NL   '	;25
	DW	C.JNL
	DB	'LE   '
	DW	C.JLE
	DB	'NG   '
	DW	C.JNG
	DB	'G    '
	DW	C.JG
	DB	'NLE  '
	DW	C.JNLE
	DB	'CXZ  '	;30
	DW	C.JCXZ

PNT.L:	DB	'EA   '
	DW	C.LEA
	DB	'ODSB '
	DW	C.LODSB
	DB	'ODSW '
	DW	C.LODSW
	DB	'ODSD '
	DW	C.LODSD
	DB	'AHF  '
	DW	C.LAHF
	DB	'OOP  '
	DW	C.LOOP
	DB	'OOPE '
	DW	C.LOOPE
	DB	'OOPNE'
	DW	C.LOOPNE

PNT.M:	DB	'OV   '
	DW	C.MOV
	DB	'OVSB '
	DW	C.MOVSB
	DB	'OVSW '
	DW	C.MOVSW
	DB	'OVSD '
	DW	C.MOVSD
	DB	'UL   '
	DW	C.MUL
	DB	'OVZX '
	DW	C.MOVZX
	DB	'OVSX '
	DW	C.MOVSX

PNT.N:	DB	'OT   '
	DW	C.NOT
	DB	'EG   '
	DW	C.NEG
	DB	'OP   '
	DW	C.NOP

PNT.O:	DB	'R    '
	DW	C.OR
	DB	'RG   '
	DW	C.ORG
	DB	'UT   '
	DW	C.OUT

PNT.P:	DB	'USH  '
	DW	C.PUSH
	DB	'OP   '
	DW	C.POP
	DB	'USHF '
	DW	C.PUSHF
	DB	'OPF  '
	DW	C.POPF
	DB	'USHFD'
	DW	C.PUSHFD
	DB	'OPFD '
	DW	C.POPFD
	DB	'USHA '
	DW	C.PUSHA
	DB	'OPA  '
	DW	C.POPA
	DB	'USHAD'
	DW	C.PUSHAD
	DB	'OPAD '
	DW	C.POPAD

PNT.R:	DB	'CL   '
	DW	C.RCL
	DB	'CR   '
	DW	C.RCR
	DB	'OL   '
	DW	C.ROL
	DB	'OR   '
	DW	C.ROR

	DB	'ET   '
	DW	C.RET
	DB	'EP   '
	DW	C.REP
	DB	'EPE  '
	DW	C.REP
	DB	'EPZ  '
	DW	C.REP
	DB	'EPNE '
	DW	C.REPNE
	DB	'EPNZ '
	DW	C.REPNE

PNT.S:	DB	'AL   '
	DW	C.SAL
	DB	'HL   '
	DW	C.SHL
	DB	'AR   '
	DW	C.SAR
	DB	'HR   '
	DW	C.SHR

	DB	'BB   '
	DW	C.SBB
	DB	'UB   '
	DW	C.SUB
	DB	'TC   '
	DW	C.STC
	DB	'TD   '
	DW	C.STD
	DB	'TI   '
	DW	C.STI
	DB	'CASB '
	DW	C.SCASB
	DB	'CASW '
	DW	C.SCASW
	DB	'CASD '
	DW	C.SCASD
	DB	'TOSB '
	DW	C.STOSB
	DB	'TOSW '
	DW	C.STOSW
	DB	'TOSD '
	DW	C.STOSD
	DB	'AHF  '
	DW	C.SAHF

PNT.T:	DB	'EST  '
	DW	C.TEST

PNT.X:
	DB	'OR   '
	DW	C.XOR
	DB	'CHG  '
	DW	C.XCHG
	DB	'LAT  '
	DW	C.XLAT

;J.TBL1:


;*************************************

C.ALIGN:
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB

	;JMP	C.ALIGN.20	;#

	MOV	BX,[VAL1]
	DEC	BX
	MOV	CX,[O.ADR1]
C.ALIGN.10:
	MOV	AX,CX
	AND	AX,BX
	JE	C.ALIGN.20
	MOV	AL,90H	;00H
	CALL	SETDAT
	INC	CX
	JMP	C.ALIGN.10
C.ALIGN.20:
	JMP	MAIN20

;
;
;
C.ORG:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
	MOV	EBX,[VAL1]
	MOV	[ORG.ADR],EBX
	MOV	[O.ADR1],EBX
	JMP	MAIN20

;
;
;
C.END:	DEC	SI
	CALL	S.SKIP
	JNE	ERRB
	JMP	MAIN02

C.DB:
	DEC	SI
	CALL	S.SKIP
C.DB0:
	MOV	AL,[SI]
	CMP	AL,27H
	JE	C.DB3
	CMP	AL,'"'
	JE	C.DB3
C.DB1:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
	MOV	BX,[VAL1]
	MOV	AL,BL
	CALL	SETDAT
	DEC	SI
	CALL	S.SKIP
	MOV	AL,[SI]
	CMP	AL,','
	JNE	MAIN20
	INC	SI
	JMP	C.DB0
C.DB3:	MOV	CL,AL

	INC	SI
	INC	SI
	MOV	AL,[SI]
	DEC	SI
	DEC	SI	;LD A,(IX+2)

	CMP	AL,CL
	JE	C.DB1
C.DB4:
	INC	SI
	MOV	AL,[SI]
	CMP	AL,CL
	JE	C.DB6
	CMP	AL,7FH
	JE	ERR6
	PUSH	CX
	CALL	SETDAT
	POP	CX
	JMP	C.DB4
C.DB6:
	CALL	S.SKIP
	MOV	AL,[SI]
	CMP	AL,','
	JNE	MAIN20
	INC	SI
	JMP	C.DB0

;
;
;
C.DW:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
C.DW1:	MOV	BX,[VAL1]
	CALL	SETD2
	DEC	SI
	CALL	S.SKIP
	JE	MAIN20
	CALL	OPCOD2
	JMP	C.DW1
;
;
;
C.DD:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
C.DD1:	MOV	BX,[VAL1]
	CALL	SETD2
	MOV	BX,[VAL1+2]
	CALL	SETD2
	DEC	SI
	CALL	S.SKIP
	JE	MAIN20
	CALL	OPCOD2
	JMP	C.DD1

;

C.DM:
	DEC	SI
	CALL	S.SKIP
	MOV	AL,[SI]
	CMP	AL,27H
	JE	C.DM0
	CMP	AL,'"'
	JNE	ERRB
C.DM0:	MOV	CL,AL
C.DM1:	INC	SI
	MOV	AL,[SI]
	CMP	AL,CL
	JE	C.DM2
	PUSH	CX
	CALL	SETDAT
	POP	CX
	JMP	C.DM1
C.DM2:	INC	SI
	JMP	MAIN20

;
;
;
C.DS:	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
	DEC	SI
	CALL	S.SKIP
	MOV	AL,[SI]
	CMP	AL,','
	MOV	CH,00H
	MOV	EBX,[VAL1]
	MOV	[VAL2],EBX
	JNE	C.DS1
	CALL	OPCOD2
	CMP	AL,50H
	JNE	ERRB

	MOV	EBX,[VAL1]
	MOV	AL,BH
	OR	AL,AL
	JNE	ERR7

	MOV	CH,BL
C.DS1:	MOV	EBX,[VAL2]

C.DS2:	OR	EBX,EBX
	JE	MAIN20
	MOV	AL,CH
	PUSH	CX
	CALL	SETDAT
	POP	CX
	DEC	EBX
	JMP	C.DS2

;
;
;

C.CALL:	CALL	OPCODE
	MOV	CH,AL
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.CALLREG
	CMP	AL,50H
	JE	C.CALLN
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.CALLMEM
	JMP	ERRB

C.CALLN:
	MOV	AL,0E8H
	CALL	SETDAT
	CALL	RELADRS
	JMP	MAIN20

C.CALLMEM:
	CMP	BYTE [FLG2.FAR],0
	JNE	C.CALLFMEM

	MOV	AL,0FFH
	CALL	SETDAT
	MOV	AL,00010000B
	CALL	MEM1
	JMP	MAIN20

C.CALLFMEM:
	MOV	AL,0FFH
	CALL	SETDAT
	MOV	AL,00011000B
	CALL	MEM1
	JMP	MAIN20


C.CALLREG:
	PUSH	AX
	MOV	AL,0FFH
	CALL	SETDAT
	POP	AX
	AND	AL,07H
	OR	AL,11010000B
	CALL	SETDAT
	JMP	MAIN20

;
;
;
C.TEST:	CALL	TERM2

	CMP	CL,50H
	JNE	C.TEST.10
	;CMP	CH,00H
	;JE	C.TESTACC
	;CMP	CH,08H
	;JE	C.TESTACC

C.TEST.10:
	MOV	AL,CH
	CMP	AL,10H
	JB	C.TESTRG

	CMP	AL,30H
	JB	ERRB

	CMP	AL,30H+20H
	JB	C.TESTMEM
	JMP	ERRB

C.TESTRG:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.TESTRGRG
	CMP	AL,50H
	JE	C.TESTRGN
	JMP	ERRB
C.TESTRGRG:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,84H
	CALL	SETDAT
	MOV	AL,CL
	CALL	CVREG2
	AND	CH,7
	OR	AL,CH
	OR	AL,0C0H
	JMP	SETD1

C.TESTRGN:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0C0H
	CALL	SETDAT
	MOV	BX,[VAL2]

	MOV	AL,CH
	SHR	AL,3
	CALL	SETV2
	JMP	MAIN20

;	MOV	AL,CH
;	CMP	AL,10H
;	MOV	AL,BL
;	JB	C.TESTRGNB
;	CALL	SETDAT
;	MOV	AL,BH
;C.TESTRGNB:
;	JMP	SETD1

C.TESTMEM:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.TESTMEMRG
	CMP	AL,50H
	JE	C.TESTMEMN
	JMP	ERRB

C.TESTMEMRG:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,84H
	CALL	SETDAT
	MOV	AL,CL
	CALL	CVREG2
	CALL	MEM1
	JMP	MAIN20

C.TESTMEMN:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	PUSH	AX
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,00H
	CALL	MEM1
	POP	AX
	AND	AL,1
	MOV	AX,[VAL2]
	JE	C.TESTMEMN.B
	CALL	SETDAT
	MOV	AL,AH
C.TESTMEMN.B:
	JMP	SETD1
C.TESTACC:
	MOV	AL,CH
	CALL	SIZE
	PUSH	AX
	CALL	SETPRE2
	OR	AL,0A8H
	CALL	SETDAT
	POP	AX
	AND	AL,1
	MOV	AX,[VAL2]
	JE	C.TESTACC.B
	CALL	SETDAT
	MOV	AL,AH
C.TESTACC.B:
	JMP	SETD1

;
;
;
C.ADD:	MOV	AL,00000000B
	JMP	C.C
C.ADC:	MOV	AL,00010000B
	JMP	C.C
C.SBB:	MOV	AL,00011000B
	JMP	C.C
C.SUB:	MOV	AL,00101000B
	JMP	C.C
C.AND:	MOV	AL,00100000B
	JMP	C.C
C.OR:	MOV	AL,00001000B
	JMP	C.C
C.XOR:	MOV	AL,00110000B
	JMP	C.C
C.CMP:	MOV	AL,00111000B
	JMP	C.C
;
C.C:
	MOV	[BDAT+0],AL
	CALL	TERM2

	CMP	CL,50H
	JNE	C.C.10
	;CMP	CH,00H
	;JE	C.CACC
	;CMP	CH,08H
	;JE	C.CACC

C.C.10:
	MOV	AL,CH
	CMP	AL,10H
	JB	C.CRG

	CMP	AL,30H
	JB	ERRB

	CMP	AL,30H+20H
	JB	C.CMEM
	JMP	ERRB
C.CRG:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.CRGRG
	CMP	AL,30H+20H
	JB	C.CRGMEM
	CMP	AL,50H
	JE	C.CRGN
	JMP	ERRB
C.CRGRG:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	PUSH	BX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	BX
	CALL	SETDAT
	MOV	AL,CL
	AND	AL,07H
	SHL	AL,3
	MOV	DL,AL
	MOV	AL,CH
	AND	AL,07H
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1
;
C.CRGN:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,80H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	PUSH	BX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	BX
	OR	AL,0C0H
;
	CALL	SETDAT

	MOV	AL,CH
	SHR	AL,3
	CALL	SETV2
	JMP	MAIN20

;
C.CRGMEM:
	CALL	SETPRE_SEG
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,02H
	MOV	BL,[BDAT]
	OR	AL,BL
	CALL	SETDAT

	MOV	AL,CH
	CALL	CVREG2
	CALL	MEM2
	JMP	MAIN20
;
C.CMEM:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.CMEMRG
	CMP	AL,50H
	JE	C.CMEMN
	JMP	ERRB

C.CMEMRG:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	MOV	BL,[BDAT]
	OR	AL,BL
	CALL	SETDAT

	MOV	AL,CL
	CALL	CVREG2
	CALL	MEM1
	JMP	MAIN20

C.CMEMN:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	PUSH	AX
	CALL	SETPRE2
	OR	AL,80H
	CALL	SETDAT
	MOV	AL,[BDAT]
	CALL	MEM1
	POP	AX
	CALL	SETV2
	JMP	MAIN20

C.CACC:
	MOV	AL,CH
	CALL	SIZE
	PUSH	AX
	CALL	SETPRE2
	MOV	BL,[BDAT]
	OR	AL,BL
	OR	AL,04H
	CALL	SETDAT
	POP	AX
	AND	AL,1
	MOV	AX,[VAL2]
	JE	C.CACC.B
	CALL	SETDAT
	MOV	AL,AH
C.CACC.B:
	JMP	SETD1


BDAT:	DS	10H

;
;
;

C.DEC:	CALL	OPCODE
	MOV	CH,AL
	CMP	AL,08H
	JB	C.DECRGB
	CMP	AL,10H
	JB	C.DECRGW
	CMP	AL,30H+20H
	JB	C.DECMEM
	JMP	ERRB
C.DECRGB:
	MOV	AL,0FEH
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0C8H
	JMP	SETD1
C.DECRGW:
	CALL	SETPRE
	MOV	AL,CH
	AND	AL,07H
	OR	AL,48H
	JMP	SETD1
C.DECMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE2	;WORD/DWORD
	OR	AL,0FEH
	CALL	SETDAT
	MOV	AL,00001000B
	CALL	MEM1
	JMP	MAIN20

;
;
;
C.IN:	CALL	TERM2
	MOV	AL,CH
	CMP	AL,00H
	JE	C.INAL
	CMP	AL,08H
	JE	C.INAX
	JMP	ERRB
C.INAL:
	MOV	AL,CL
	CMP	AL,50H
	JE	C.INALN
	CMP	AL,0AH	;DX
	JE	C.INALDX
	JMP	ERRB
C.INALN:
	MOV	AL,0E4H
	CALL	SETDAT
	MOV	AL,[VAL2]
	JMP	SETD1
C.INALDX:
	MOV	AL,0ECH
	JMP	SETD1
C.INAX:
	MOV	AL,CL
	CMP	AL,0AH
	JE	C.INAXDX
	CMP	AL,50H
	JE	C.INAXN
	JMP	ERRB
C.INAXDX:
	MOV	AL,0EDH
	JMP	SETD1
C.INAXN:
	MOV	AL,0E5H
	CALL	SETDAT
	MOV	AL,[VAL2]
	JMP	SETD1

;
;
;

C.INC:	CALL	OPCODE
	MOV	CH,AL
	CMP	AL,08H
	JB	C.INCRGB
	CMP	AL,10H
	JB	C.INCRGW
	CMP	AL,30H+20H
	JB	C.INCMEM
	JMP	ERRB

C.INCRGB:
	MOV	AL,0FEH
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0C0H
	JMP	SETD1

C.INCRGW:
	CALL	SETPRE
	AND	AL,07H
	OR	AL,40H
	JMP	SETD1

C.INCMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE	;
	OR	AL,0FEH
	CALL	SETDAT
	MOV	AL,00H
	CALL	MEM1
	JMP	MAIN20

;
;
;

C.INT:
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
	MOV	AL,0CDH
	CALL	SETDAT
	MOV	AL,[VAL1]
	JMP	SETD1

;
;
;

C.JMP:	CALL	OPCODE
	CMP	AL,50H
	JE	C.JMPN
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.JMPREG
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.JMPMEM
	JMP	ERRB

C.JMPN:	MOV	AL,[FLG2.SHORT]
	OR	AL,AL
	JNE	C.JMPN_SHORT

	MOV	AL,0E9H
	CALL	SETDAT
	CALL	RELADRS
	JMP	MAIN20
C.JMPN_SHORT:
	MOV	AL,0EBH
	PUSH	AX
	JMP	C.J1


C.JMPMEM:
	MOV	AL,0FFH
	CALL	SETDAT
	MOV	AL,00100000B
	CALL	MEM1
	JMP	MAIN20

C.JMPREG:
	PUSH	AX
	MOV	AL,0FFH
	CALL	SETDAT
	POP	AX
	AND	AL,07H
	OR	AL,11100000B
	CALL	SETDAT
	JMP	MAIN20


C.JO:	MOV	AL,70H
	JMP	C.J2
C.JNO:	MOV	AL,71H
	JMP	C.J2
C.JNAE:
C.JB:	MOV	AL,72H
	JMP	C.J2
C.JAE:
C.JNB:	MOV	AL,73H
	JMP	C.J2
C.JZ:
C.JE:	MOV	AL,74H
	JMP	C.J2
C.JNZ:
C.JNE:	MOV	AL,75H
	JMP	C.J2
C.JNA:
C.JBE:	MOV	AL,76H
	JMP	C.J2
C.JNBE:
C.JA:	MOV	AL,77H
	JMP	C.J2
C.JS:	MOV	AL,78H
	JMP	C.J2
C.JNS:	MOV	AL,79H
	JMP	C.J2
C.JP:	MOV	AL,7AH
	JMP	C.J2
C.JPO:
C.JNP:	MOV	AL,7BH
	JMP	C.J2
C.JNGE:
C.JL:	MOV	AL,7CH
	JMP	C.J2
C.JNL:
C.JGE:	MOV	AL,7DH
	JMP	C.J2
C.JNG:
C.JLE:	MOV	AL,7EH
	JMP	C.J2
C.JNLE:
C.JG:	MOV	AL,7FH
	JMP	C.J2

C.LOOP:	MOV	AL,0E2H
	JMP	C.J

C.LOOPE:MOV	AL,0E1H
	JMP	C.J

C.LOOPNE:MOV	AL,0E0H
	JMP	C.J

C.JCXZ:	MOV	AL,0E3H
	JMP	C.J

;
C.J:	PUSH	AX
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB
C.J1:
	CALL	REL
	POP	AX

	CALL	SETDAT
;
	MOV	AL,BL
	JMP	SETD1

C.J2:	PUSH	AX
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB

	MOV	AL,[FLG.R]
	OR	AL,AL
	JNE	C.J1

	MOV	AL,[FLG2.SHORT]
	OR	AL,AL
	JNE	C.J1

	MOV	AL,0FH
	CALL	SETDAT
	POP	AX
	SUB	AL,70H
	ADD	AL,80H
	CALL	SETDAT

	CALL	RELADRS
	JMP	MAIN20

;
;
;

C.LEA:	CALL	TERM2
	MOV	AL,CH
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JNB	ERRB

	MOV	AL,CL
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JNB	ERRB

	MOV	AL,8DH
	CALL	SETDAT
	MOV	AL,CH
	CALL	CVREG2
	CALL	MEM2
	JMP	MAIN20

;
;
;
C.MOVZX:
	MOV	AL,0B6H
	JMP	C.MOVZX2

C.MOVSX:
	MOV	AL,0BEH
	JMP	C.MOVZX2

C.MOVZX2:
	MOV	[C.MOVZX.CODE],AL
	CALL	TERM2_2
	MOV	AL,CH
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.MOVZX.REG
	JMP	ERRB

C.MOVZX.REG:
	CMP	CL,10H
	JB	C.MOVZX.REGREG
	CMP	CL,30H
	JB	ERRB
	CMP	CL,30H+20H
	JB	C.MOVZX.REGMEM
	JMP	ERRB

C.MOVZX.REGREG:
	CALL	SETPRE
	MOV	AL,0FH
	CALL	SETDAT
	MOV	AL,CL
	CALL	SIZE
	OR	AL,[C.MOVZX.CODE]	;0B6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	CALL	CVREG2
	AND	CL,07H
	OR	AL,CL
	OR	AL,11000000B
	JMP	SETD1

C.MOVZX.REGMEM:
	CALL	SETPRE
	MOV	AL,0FH
	CALL	SETDAT
;	MOV	AL,CL
;	CALL	SIZE
	CALL	BYTEWORD

	OR	AL,[C.MOVZX.CODE]	;0B6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	CALL	CVREG2
	CALL	MEM2
	JMP	MAIN20

C.MOVZX.CODE:DS	1

;
;
;
TERM2_2:
	CALL	OPCODE
	MOV	CH,AL
	MOV	AL,[PRE_SIZE]
	MOV	[PRE_SIZE1],AL
	PUSH	CX
	MOV	AL,[FLG2.DWORD]
	PUSH	AX

	MOV	EBX,[VAL1]
	PUSH	EBX

	CALL	OPCOD2
	MOV	BL,[PRE_SIZE]
	MOV	[PRE_SIZE2],AL
	MOV	EBX,[VAL1]
	MOV	[VAL2],EBX

	POP	EBX
	MOV	[VAL1],EBX

	POP	CX
	MOV	[FLG2.DWORD],CL

	POP	CX
	MOV	CL,AL
	RET

;
;
;


C.MOV:	CALL	TERM2
	MOV	AL,CH
	CMP	AL,10H
	JB	C.MOVRG
	CMP	AL,14H
	JB	C.MOVSG
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.MOVMEM
	JMP	ERRB
C.MOVRG:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.MOVRGRG
	CMP	AL,14H
	JB	C.MOVRGSG
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.MOVRGMEM
	CMP	AL,50H
	JE	C.MOVRGN
	JMP	ERRB

C.MOVRGRG:
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,88H
	CALL	SETDAT
	MOV	AL,CL
	SHL	AL,3
	AND	AL,38H
	MOV	DL,AL
	MOV	AL,CH
	AND	AL,07H
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1

C.MOVRGSG:
	MOV	AL,CH
	CMP	AL,08H
	JB	ERRB
	MOV	AL,8CH
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	MOV	DL,AL
	MOV	AL,CL
	SUB	AL,10H
	SHL	AL,3
	AND	AL,18H
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1

C.MOVRGMEM:
	MOV	AL,CH
	AND	AL,07H
	CMP	AL,00H
	JNE	C.MOVRGMEM.05
	MOV	AL,CL
	CALL	ISMEM
;	CMP	AL,30H+00110B
	JE	C.MOVACCMEM

C.MOVRGMEM.05:
	CALL	SETPRE_SEG
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,8AH
	CALL	SETDAT
	MOV	AL,CH
	CALL	CVREG2
	CALL	MEM2
	JMP	MAIN20

;	acc,[nn]

C.MOVACCMEM:
	CALL	SETPRE_SEG
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0A0H
	CALL	SETDAT
	CALL	SETA2
	JMP	MAIN20

C.MOVRGN:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2

	MOV	AL,CH
	AND	AL,0FH
	OR	AL,0B0H
	CALL	SETDAT

	MOV	AL,CH
	SHR	AL,3

;	CMP	AL,08H
;	MOV	BX,[VAL2]
;	MOV	AL,BL
;	JB	C.MOVRGN.1
;	CALL	SETDAT
;	MOV	AL,BH
;C.MOVRGN.1:
;	JMP	SETD1

	CALL	SETV2
	JMP	MAIN20


C.MOVSG:
	MOV	AL,CL
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.MOVSGRG
	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.MOVSGMEM
	JMP	ERRB

C.MOVSGRG:
	MOV	AL,CL
	CMP	AL,08H
	JB	ERRB
	MOV	AL,8EH
	CALL	SETDAT
	MOV	AL,CH
	SUB	AL,10H
	SHL	AL,3
	AND	AL,18H
	MOV	DL,AL
	MOV	AL,CL
	AND	AL,07H
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1

C.MOVSGMEM:
	CALL	SETPRE_SEG
	MOV	AL,8EH
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,03H
	SHL	AL,3
	CALL	MEM2
	JMP	MAIN20

;
C.MOVMEM:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.MOVMEMRG
	CMP	AL,14H
	JB	C.MOVMEMSG
	CMP	AL,50H
	JE	C.MOVMEMN
	JMP	ERRB

C.MOVMEMRG:
	MOV	AL,CH
;	CMP	AL,30H+00110B
	CALL	ISMEM
	JNE	C.MOVMEMRG.05
	MOV	AL,CL
	AND	AL,07H
	CMP	AL,00H
	JE	C.MOVMEMACC

C.MOVMEMRG.05:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,88H
	CALL	SETDAT
	MOV	AL,CL
	CALL	CVREG2
	CALL	MEM1
	JMP	MAIN20

C.MOVMEMACC:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0A2H
	CALL	SETDAT
	CALL	SETA1
	JMP	MAIN20

C.MOVMEMSG:
	CALL	SETPRE_SEG
	MOV	AL,8CH
	CALL	SETDAT
	AND	CL,03H
	SHL	CL,3
	MOV	AL,CL
	CALL	MEM1
	JMP	MAIN20



C.MOVMEMN:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	PUSH	AX
	CALL	SETPRE2
	OR	AL,0C6H
	CALL	SETDAT
	MOV	AL,00H
	CALL	MEM1
	POP	AX
	CALL	SETV2
	JMP	MAIN20



C.IMUL:	MOV	AL,00101000B
	JMP	C.M
C.MUL:	MOV	AL,00100000B
	JMP	C.M
C.IDIV:	MOV	AL,00111000B
	JMP	C.M
C.DIV:	MOV	AL,00110000B
	JMP	C.M

;
C.M:	MOV	[BDAT],AL
	CALL	OPCODE
	MOV	CH,AL
	CMP	AL,10H
	JB	C.IMULRG
	CMP	AL,30H+20H
	JB	C.IMULMEM
	JMP	ERRB

C.IMULRG:
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	PUSH	BX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	BX
	OR	AL,0C0H
	JMP	SETD1

C.IMULMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,[BDAT]
	CALL	MEM1
	JMP	MAIN20

;
;
;
C.MOVSB:MOV	AL,0A4H
	JMP	SETD1

C.MOVSW:CALL	PREW
C.MOVSW.10:
	MOV	AL,0A5H
	JMP	SETD1

C.MOVSD:CALL	PRED
	JMP	C.MOVSW.10
;
C.CMPSB:MOV	AL,0A6H
	JMP	SETD1

C.CMPSW:CALL	PREW
C.CMPSW.10:
	MOV	AL,0A7H
	JMP	SETD1

C.CMPSD:CALL	PRED
	JMP	C.CMPSW.10
;
C.STOSB:MOV	AL,0AAH
	JMP	SETD1

C.STOSW:CALL	PREW
C.STOSW.10:
	MOV	AL,0ABH
	JMP	SETD1

C.STOSD:CALL	PRED
	JMP	C.STOSW.10
;
C.LODSB:MOV	AL,0ACH
	JMP	SETD1

C.LODSW:CALL	PREW
C.LODSW.10:
	MOV	AL,0ADH
	JMP	SETD1

C.LODSD:CALL	PRED
	JMP	C.LODSW.10
;
C.SCASB:MOV	AL,0AEH
	JMP	SETD1

C.SCASW:CALL	PREW
C.SCASW.10:
	MOV	AL,0AFH
	JMP	SETD1

C.SCASD:
	CALL	PRED
	JMP	C.SCASW.10
;
C.NOP:
	MOV	AL,90H
	JMP	SETD1
;
;
;
C.NEG:	CALL	OPCODE
	CMP	AL,10H
	JB	C.NEGRG

	CMP	AL,30H
	JB	ERRB

	CMP	AL,30H+20H
	JB	C.NEGMEM
	JMP	ERRB

C.NEGRG:
	MOV	CH,AL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0D8H
	JMP	SETD1

C.NEGMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,000011000B
	CALL	MEM1
	JMP	MAIN20


;
;
;

C.NOT:	CALL	OPCODE
	CMP	AL,10H
	JB	C.NOTRG

	CMP	AL,30H
	JB	ERRB
	CMP	AL,30H+20H
	JB	C.NOTMEM

	JMP	ERRB
C.NOTRG:
	MOV	CH,AL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	OR	AL,0D0H
	JMP	SETD1

C.NOTMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE
	OR	AL,0F6H
	CALL	SETDAT
	MOV	AL,000010000B
	CALL	MEM1
	JMP	MAIN20

;
;
;
C.OUT:	CALL	TERM2
	MOV	AL,CH
	CMP	AL,50H
	JE	C.OUTN
	CMP	AL,0AH
	JE	C.OUTDX
	JMP	ERRB
C.OUTN:
	MOV	AL,CL
	CMP	AL,00H
	JE	C.OUTNAL
	CMP	AL,08H
	JE	C.OUTNAX
	JMP	ERRB
C.OUTNAL:
	MOV	AL,0E6H
	CALL	SETDAT
	MOV	AL,[VAL1]
	JMP	SETD1
C.OUTNAX:
	MOV	AL,0E7H
	CALL	SETDAT
	MOV	AL,[VAL1]
	JMP	SETD1

C.OUTDX:
	MOV	AL,CL
	CMP	AL,00H
	JE	C.OUTDXAL
	CMP	AL,08H
	JE	C.OUTDXAX
	JMP	ERRB
C.OUTDXAL:
	MOV	AL,0EEH
	JMP	SETD1
C.OUTDXAX:
	MOV	AL,0EFH
	JMP	SETD1
;
;
;
C.POP:	CALL	OPCODE
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.POPRG
	CMP	AL,14H
	JB	C.POPSG
	CMP	AL,30H+20H
	JB	C.POPMEM
	JMP	ERRB
C.POPRG:
	CALL	SETPRE
	AND	AL,07H
	OR	AL,58H
	JMP	SETD1
C.POPSG:
	SUB	AL,10H
	SHL	AL,3
	OR	AL,07H
	JMP	SETD1
C.POPMEM:
	CALL	SETPRE_SEG
	CALL	SETPRE
	MOV	AL,8FH
	CALL	SETDAT
	MOV	AL,00000000B
	CALL	MEM1
	JMP	MAIN20

;
;
;
C.PUSH:	CALL	OPCODE
	CMP	AL,08H
	JB	ERRB
	CMP	AL,10H
	JB	C.PUSHRG
	CMP	AL,14H
	JB	C.PUSHSG
	CMP	AL,30H+20H
	JB	C.PUSHMEM
	CMP	AL,50H
	JE	C.PUSHNN
	JMP	ERRB
C.PUSHRG:
	CALL	SETPRE
	AND	AL,07H
	OR	AL,50H
	JMP	SETD1
C.PUSHSG:
	SUB	AL,10H
	SHL	AL,3
	OR	AL,06H
	JMP	SETD1
C.PUSHMEM:
	CALL	SETPRE_SEG
	CALL	SETPRE
	MOV	AL,0FFH
	CALL	SETDAT
	MOV	AL,00110000B
	CALL	MEM1
	JMP	MAIN20
C.PUSHNN:
	CALL	SETPRE
	MOV	AL,68H
	CALL	SETDAT

	CALL	ISDWORD
	JE	C.PUSHNNNN
	MOV	BX,[VAL1]
	CALL	SETD2
	JMP	MAIN20
C.PUSHNNNN:
	MOV	BX,[VAL1]
	CALL	SETD2
	MOV	BX,[VAL1+2]
	CALL	SETD2
	JMP	MAIN20

;
;
;
C.REP:	MOV	AL,0F3H
	JMP	SETD1

C.REPNE:MOV	AL,0F2H
	JMP	SETD1

C.RET:
	DEC	SI
	CALL	S.SKIP
	JNE	C.RET2
	MOV	AL,0C3H
	JMP	SETD1

C.RET2:
	CALL	OPCODE
	CMP	AL,50H
	JNE	ERRB

	MOV	AL,0C2H
	CALL	SETDAT

	MOV	BX,[VAL1]
	CALL	SETD2
	JMP	MAIN20

;
;
;
C.RCL:	MOV	AL,00010000B
	JMP	C.S

C.RCR:	MOV	AL,00011000B
	JMP	C.S

C.ROL:	MOV	AL,00000000B
	JMP	C.S

C.ROR:	MOV	AL,00001000B
	JMP	C.S

C.SAL:
C.SHL:	MOV	AL,00100000B
	JMP	C.S

C.SAR:	MOV	AL,00111000B
	JMP	C.S

C.SHR:	MOV	AL,00101000B
	JMP	C.S

;
C.S:	MOV	[BDAT+0],AL
	CALL	TERM2
	MOV	AL,CH
	CMP	AL,10H
	JB	C.SRG
	CMP	AL,30H+20H
	JB	C.SMEM
	JMP	ERRB

C.SRG:
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,0D0H
	MOV	DL,AL
	MOV	AL,CL
	CMP	AL,50H
	JE	C.SRG1
	OR	DL,02H	;DL|=00000010B
	MOV	AL,CL
	CMP	AL,01H
	JE	C.SRGCL
	JMP	ERRB

C.SRG1:
	MOV	BX,[VAL2]
	CMP	BX,1
	JNE	C.SRGN
C.SRGCL:
	MOV	AL,DL
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	PUSH	BX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	BX
	OR	AL,0C0H
	JMP	SETD1
C.SRGN:
	MOV	AL,DL
	AND	AL,01H
	OR	AL,0C0H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	PUSH	BX
	MOV	BL,[BDAT]
	OR	AL,BL
	POP	BX
	OR	AL,0C0H
	CALL	SETDAT
	MOV	AL,[VAL2]
	JMP	SETD1

C.SMEM:
	CALL	SETPRE_SEG
	CALL	BYTEWORD
	CALL	SETPRE2
	OR	AL,0D0H
	MOV	DL,AL
	CMP	CL,50H
	JE	C.SMEM1
	OR	DL,02H
	CMP	CL,01H	;CL
	JE	C.SMEMCL
C.SMEM1:
	MOV	BX,[VAL1]
	CMP	BX,1
	JNE	C.SMEMN
C.SMEMCL:
	MOV	AL,DL
	CALL	SETDAT
	MOV	AL,[BDAT]
	CALL	MEM1
	JMP	MAIN20
C.SMEMN:
	MOV	AL,DL
	AND	AL,01H
	OR	AL,0C0H
	CALL	SETDAT
	MOV	AL,[BDAT]
	CALL	MEM1
	MOV	AL,[VAL2]
	JMP	SETD1

;
;
;
C.AAA:	MOV	AL,37H
	JMP	SETD1

C.AAS:	MOV	AL,3FH
	JMP	SETD1

C.AAM:	MOV	AL,0D4H
	JMP	SETD1

C.AAD:	MOV	AL,0D5H
	JMP	SETD1

C.DAA:	MOV	AL,27H
	JMP	SETD1

C.DAS:	MOV	AL,2FH
	JMP	SETD1

C.CBW:	MOV	AL,98H
	JMP	SETD1

C.CWD:	MOV	AL,99H
	JMP	SETD1

C.LAHF:	MOV	AL,9FH
	JMP	SETD1

C.SAHF:	MOV	AL,9EH
	JMP	SETD1

C.PUSHAD:
	CALL	ISDWORD
	JE	C.PUSHA.05
	JMP	C.PUSHA.10

;
C.PUSHA:
	CALL	ISDWORD
	JE	C.PUSHA.10
C.PUSHA.05:
	MOV	AL,60H
	JMP	SETD1
C.PUSHA.10:
	MOV	AL,66H
	CALL	SETDAT
	JMP	C.PUSHA.05

C.POPAD:
	CALL	ISDWORD
	JE	C.POPA.05
	JMP	C.POPA.10

;
C.POPA:
	CALL	ISDWORD
	JE	C.POPA.10
C.POPA.05:
	MOV	AL,61H
	JMP	SETD1
C.POPA.10:
	MOV	AL,66H
	CALL	SETDAT
	JMP	C.POPA.05
;
C.PUSHFD:
	CALL	ISDWORD
	JE	C.PUSHF.05
	JMP	C.PUSHF.10
;
C.PUSHF:CALL	ISDWORD
	JE	C.PUSHF.10
C.PUSHF.05:
	MOV	AL,9CH
	JMP	SETD1
C.PUSHF.10:
	MOV	AL,66H
	CALL	SETDAT
	JMP	C.PUSHF.05
;
C.POPFD:
	CALL	ISDWORD
	JE	C.POPF.05
	JMP	C.POPF.10

;
C.POPF:	CALL	ISDWORD
	JE	C.POPF.10
C.POPF.05:
	MOV	AL,9DH
	JMP	SETD1
C.POPF.10:
	MOV	AL,66H
	CALL	SETDAT
	JMP	C.POPF.05
;
C.XLAT:	MOV	AL,0D7H
	JMP	SETD1

C.CLC:	MOV	AL,0F8H
	JMP	SETD1

C.CLD:	MOV	AL,0FCH
	JMP	SETD1

C.CLI:	MOV	AL,0FAH
	JMP	SETD1

C.CMC:	MOV	AL,0F5H
	JMP	SETD1

C.STC:	MOV	AL,0F9H
	JMP	SETD1

C.STD:	MOV	AL,0FDH
	JMP	SETD1

C.STI:	MOV	AL,0FBH
	JMP	SETD1

C.IRET:	MOV	AL,0CFH
	JMP	SETD1

;
;
;

C.XCHG:	CALL	TERM2

	CMP	CL,30H
	JB	C.XCHG.10

	CALL	SWAP
C.XCHG.10:


	MOV	AL,CH
	CMP	AL,10H
	JB	C.XCHGRG

	CMP	AL,30H
	JB	ERRB

	CMP	AL,30H+20H
	JB	C.XCHGMEM
	JMP	ERRB

C.XCHGRG:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.XCHGRGRG
	JMP	ERRB

C.XCHGRGRG:
	MOV	AL,CH
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,86H
	CALL	SETDAT
	MOV	AL,CH
	AND	AL,07H
	MOV	DL,AL
	MOV	AL,CL
	AND	AL,07H
	SHL	AL,3
	OR	AL,DL
	OR	AL,0C0H
	JMP	SETD1

C.XCHGMEM:
	MOV	AL,CL
	CMP	AL,10H
	JB	C.XCHGMEMRG
	JMP	ERRB
C.XCHGMEMRG:
	CALL	SETPRE_SEG
	MOV	AL,CL
	CALL	SIZE
	CALL	SETPRE2
	OR	AL,86H
	CALL	SETDAT
	MOV	AL,CL
	CALL	CVREG2
	CALL	MEM1
	JMP	MAIN20

;
;
;

SWAP:	XCHG	CH,CL
	MOV	EAX,[VAL1]
	PUSH	EAX
	MOV	EAX,[VAL2]
	MOV	[VAL1],EAX
	POP	EAX
	MOV	[VAL2],EAX
	RET

;
;
;
TERM2:	CALL	OPCODE
	MOV	CH,AL
	MOV	AL,[PRE_SIZE]
	MOV	[PRE_SIZE1],AL
	PUSH	CX

	MOV	EBX,[VAL1]
	PUSH	EBX

	CALL	OPCOD2
	MOV	BL,[PRE_SIZE]
	MOV	[PRE_SIZE2],AL
	MOV	EBX,[VAL1]
	MOV	[VAL2],EBX

	POP	EBX
	MOV	[VAL1],EBX

	POP	CX
	MOV	CL,AL
	RET

;
;
;

CVREG2:
	AND	AL,7
	SHL	AL,3
	RET

;
;	AL:30H+n
;

CVMOD:
	PUSH	DX
	MOV	DH,AL
	SUB	AL,30H
	SHL	AL,3
	AND	AL,0C0H
	MOV	DL,AL

	MOV	AL,DH
	SUB	AL,30H
	AND	AL,07H
	OR	AL,DL
;	OR	DL,AL
	POP	DX
	RET

;

BYTEWORD:
	PUSH	BX
	MOV	AL,[PRE_SIZE]
	CMP	AL,1
	MOV	BL,0
	JE	BYTEWORD.R
	MOV	BL,1
BYTEWORD.R:
	MOV	AL,BL
	POP	BX
	RET

;

SIZE:	CMP	AL,08H
	MOV	AL,0
	JB	_RET
	INC	AL
	RET
;
REL:	MOV	AL,[PASS]
	DEC	AL
	MOV	BL,00H
	JE	REL.10
	MOV	EBX,[VAL1]
	ADD	EBX,80H
	MOV	EDX,[O.ADR1]
	INC	EDX
	INC	EDX
	SUB	EBX,EDX
	JB	ERRA

;	OR	BH,BH
;	JNE	ERRA
	CMP	EBX,100H
	JNB	ERRA

	MOV	AL,BL
	ADD	AL,80H
	MOV	BL,AL
REL.10:
	RET
;
;
;


;
MEM1:	PUSH	SI
	MOV	DL,AL
	MOV	AL,CH
	MOV	SI,VAL1
	CALL	MEM
	POP	SI
	RET

MEM2:	PUSH	SI
	MOV	DL,AL
	MOV	AL,CL
	MOV	SI,VAL2
	CALL	MEM
	POP	SI
	RET



;	AL:30H+00 mod r/m
;	DL:00 ??? 000
;
	DB	'MEM'

MEM:
	PUSH	CX
	PUSH	BX
	PUSH	AX

	CALL	CVMOD
	OR	AL,DL
	CALL	SETDAT
	CALL	IS386
	JE	MEM_3

	AND	AL,0C7H
	CMP	AL,00000110B	;[nn]
	JE	MEM.W
	AND	AL,0C0H
	CMP	AL,40H
	JE	MEM.B
	CMP	AL,80H
	JE	MEM.W
	JMP	MEM.E

MEM_3:	CMP	AL,10000101B	;[EBP+nnnn]
	JE	MEM.D
	AND	AL,0C7H
	CMP	AL,00000101B	;[nnnn]
	JE	MEM.D
	CMP	AL,00000100B	;[+0]
	JE	MEM.0

	CMP	AL,10000100B	;[+nnnn]
	JE	MEM.0.N32
	AND	AL,0C0H
	CMP	AL,40H
	JE	MEM.B
	CMP	AL,80H
	JE	MEM.D
	JMP	MEM.E

MEM.0:	MOV	AL,[MOD2]
	MOV	BL,AL
	AND	BL,07H
	CMP	BL,101B	;nnnn[]
	JE	MEM.0.10
	CALL	SETDAT
	JMP	MEM.E
MEM.0.10:
	CALL	SETDAT
	JMP	MEM.D

;MEM.0.N8:
;	MOV	AL,[MOD2]
;	CALL	SETDAT
;	JMP	MEM.B

MEM.0.N32:
	MOV	AL,[MOD2]
	CALL	SETDAT
	JMP	MEM.D

MEM.B:	MOV	AL,[SI]
	CALL	SETDAT
	JMP	MEM.E

MEM.W:	MOV	BX,[SI]		;VAL1/VAL2
	CALL	SETD2
	JMP	MEM.E

MEM.D:
	MOV	BX,[SI]
	CALL	SETD2
	INC	SI
	INC	SI
	MOV	BX,[SI]
	CALL	SETD2
	JMP	MEM.E


MEM.E:
	POP	AX
	POP	BX
	POP	CX
	RET
;
PREW:	PUSH	AX
	CALL	ISDWORD
	JNE	PREW.10
	MOV	AL,66H
	CALL	SETDAT
PREW.10:
	POP	AX
	RET
;
PRED:	PUSH	AX
	CALL	ISDWORD
	JE	PRED.10
	MOV	AL,66H
	CALL	SETDAT
PRED.10:
	POP	AX
	RET
;
SETPRE2:
	TEST	AL,01H
	JE	SETPRE2.10
	CALL	SETPRE
SETPRE2.10:
	RET

;
SETPRE:
	PUSH	BX
	PUSH	AX
	MOV	AL,[FLG.DWORD]
	MOV	BL,[FLG2.DWORD]
	CMP	AL,BL
	JE	SETPRE.10
	MOV	AL,66H
	CALL	SETDAT
SETPRE.10:
	POP	AX
	POP	BX
	RET

;
SETPRE_SEG:
	PUSH	AX
	MOV	AL,[PRE_SEG]
	OR	AL,AL
	JE	SETPRE_SEG.10
	CALL	SETDAT
SETPRE_SEG.10:
	POP	AX
	RET

;
ISMEM:	PUSH	AX
	CALL	IS386
	JE	ISMEM_3
	CMP	AL,30H+00000110B
	JE	ISMEM.30
	JMP	ISMEM.40
ISMEM_3:
	CMP	AL,30H+00000101B
	JE	ISMEM.30
	JMP	ISMEM.40

ISMEM.30:
	XOR	AX,AX
	POP	AX
	RET
ISMEM.40:
	XOR	AX,AX
	INC	AX
	POP	AX
	RET

;
IS386:	PUSH	AX
	MOV	AL,[FLG2.386]
	INC	AL
	POP	AX
	RET

;
ISDWORD:PUSH	AX
	MOV	AL,[FLG2.DWORD]
	INC	AL
	POP	AX
	RET

;

SETV1:	PUSH	SI
	PUSH	BX
	PUSH	AX
	MOV	SI,VAL1
	JMP	SETVAL

SETV2:	PUSH	SI
	PUSH	BX
	PUSH	AX
	MOV	SI,VAL2
	JMP	SETVAL

;

SETVAL:	TEST	AL,01H
	JNE	SETVAL.10

	MOV	AL,[SI]
	CALL	SETDAT
	JMP	SETVAL.E
SETVAL.10:
	CALL	ISDWORD
	JE	SETVAL.15
	MOV	BX,[SI]
	CALL	SETD2
	JMP	SETVAL.E
SETVAL.15:
	MOV	BX,[SI]
	CALL	SETD2
	INC	SI
	INC	SI
	MOV	BX,[SI]
	CALL	SETD2
SETVAL.E:
	POP	AX
	POP	BX
	POP	SI
	RET

;

SETA1:	PUSH	SI
	PUSH	BX
	PUSH	AX
	MOV	SI,VAL1
	JMP	SETADRS

SETA2:	PUSH	SI
	PUSH	BX
	PUSH	AX
	MOV	SI,VAL2
	JMP	SETADRS

;

RELADRS:
	MOV	EBX,[VAL1]
	MOV	EDX,[O.ADR1]
	INC	EDX
	INC	EDX
	CALL	ISDWORD
	JE	RELADRS.10
	SUB	EBX,EDX
	CALL	SETD2
	RET
RELADRS.10:
	INC	EDX
	INC	EDX
	SUB	EBX,EDX

;	MOV	DX,0
;	SBB	DX,DX
	PUSH	EBX

	CALL	SETD2

;	MOV	BX,DX
	POP	EBX
	SHR	EBX,10H

	CALL	SETD2
	RET


;

SETADRS:
	CALL	IS386
	JE	SETADRS.15
	MOV	BX,[SI]
	CALL	SETD2
	JMP	SETADRS.E
SETADRS.15:
	MOV	BX,[SI]
	CALL	SETD2
	INC	SI
	INC	SI
	MOV	BX,[SI]
	CALL	SETD2
SETADRS.E:
	POP	AX
	POP	BX
	POP	SI
	RET

;	set BL,BH

SETD2:	PUSH	BX
	MOV	AL,BL
	CALL	SETDAT
	POP	BX
	MOV	AL,BH
	JMP	SETDAT

;	set AL

SETD1:	CALL	SETDAT
	JMP	MAIN20

;*************************************
;
;
;
;	00 01 02 03 04 05 06 07
;	AL CL DL BL AH CH DH BH
;
;	08 09 0A 0B 0C 0D 0E 0F
;	AX CX DX BX SP BP SI DI
;
;	10 11 12 13
;	ES CS SS DS
;
;	30+00:000(mod:r/m)
;
;	50
;	nn
;

OPCOD2:
	CALL	S.SKP2
	CMP	AL,','
	JNE	ERR6
OPCOD3:	INC	SI

OPCODE:
	MOV	BX,WORK2
	MOV	CH,40
	MOV	AL,' '
CODECL:	MOV	[BX],AL
	INC	BX
	DEC	CH
	JNE	CODECL
	DEC	SI
	CALL	S.SKIP
	JE	CODE99

	MOV	AL,[SI]
	CMP	AL,'['
	JNE	CODE10A	;CODE10
	INC	SI

	MOV	AL,[PRE_SIZE]
	PUSH	AX
	MOV	AL,[FLG2.386]
	MOV	AH,[FLG2.DWORD]
	PUSH	AX
	CALL	CODE10
	POP	BX
	MOV	[FLG2.386],BL
	MOV	[FLG2.DWORD],BH
	POP	BX
	MOV	[PRE_SIZE],BL

	MOV	CH,AL
	MOV	AL,[SI]
	CMP	AL,']'
	JNE	CODE50
	INC	SI

	CALL	IS386
	JE	CD10

	MOV	AL,CH
	CMP	AL,0EH
	JNE	CD01
	MOV	CH,30H+00100B;[SI]
	JMP	CODE90
CD01:	CMP	AL,0FH
	JNE	CD02
	MOV	CH,30H+00101B;[DI]
	JMP	CODE90
CD02:	CMP	AL,50H
	JNE	CD03
	MOV	CH,30H+00110B;[nn]
	JMP	CODE90
CD03:	CMP	AL,0BH
	JNE	CD04
	MOV	CH,30H+00111B;[BX]
	JMP	CODE90
CD04:	JMP	ERR6

;	386

CD10:
	MOV	AL,CH
	CMP	AL,08H
	JB	ERR6
	CMP	AL,0CH	;[SP]
	JE	ERR6
	CMP	AL,0DH	;[BP]
	JE	ERR6
	CMP	AL,10H
	JB	CD10.R
	CMP	AL,50H
	JE	CD10.M
	JMP	ERR6

;	[reg]

CD10.R:
	SUB	CH,08H
	ADD	CH,30H
	JMP	CODE90

;	[nnnn]

CD10.M:
	MOV	CH,30H+00101B
	JMP	CODE90
;

STRCMP:
	PUSH	CX
	CLD
	MOV	CH,0
	MOV	CL,[DI]
	INC	DI
STRCMP.10:
	REP
	CMPSB
	POP	CX
	RET

STR_BYTE:DB	4,'BYTE'

STR_WORD:DB	4,'WORD'

STR_DWORD:DB	5,'DWORD'

STR_SHORT:DB	5,'SHORT'

;
;	[?+ 386
;

PAR:	MOV	AL,[SI]
	CMP	AL,'+'
	JE	PAR.10
	CMP	AL,'-'
	JE	PAR.10
	JMP	ERR6

PAR.10:
;	INC	SI

	MOV	AL,CH
	CMP	AL,0CH	;[SP]
	JE	ERR6
	CMP	AL,0DH	;[BP]
	JE	PAR.BP
	PUSH	CX
	CALL	CODE10
	POP	CX
	CMP	AL,50H
	JNE	ERR6

	MOV	AL,[SI]
	CMP	AL,']'
	JNE	ERR6
	INC	SI

	SUB	CH,08H

	;	;test##
	;	MOV	EAX,[VAL1]	;###
	;	;CMP	EAX,7FH
	;	PUSH	ECX
	;	MOV	ECX,7FH
	;	CMP	EAX,ECX
	;	POP	ECX
	;	JBE	PAR.10.1

	ADD	CH,30H+10000B	
	JMP	CODE90

PAR.10.1:
	ADD	CH,30H+01000B
	JMP	CODE90


;	[EBP+

PAR.BP:
	PUSH	CX
	CALL	CODE10
	POP	CX
	CMP	AL,50H
	JNE	ERR6

	MOV	AL,[SI]
	CMP	AL,']'
	JNE	ERR6
	INC	SI

	MOV	CH,30H+00010101B
	JMP	CODE90

;
;	[?+
;

CODE50:
	CALL	IS386
	JE	PAR

	MOV	AL,[SI]
	CMP	AL,'+'
	JE	CODE50.001
	CMP	AL,'-'
	JE	CODE50.001
	JMP	ERR6
	;JNE	ERR6
CODE50.001:
;	INC	SI
	MOV	AL,CH
	CMP	AL,0BH	;BX+
	JE	CODE50_BX
	CMP	AL,0DH	;BP+
	JE	CODE50_BP
	CMP	AL,0EH	;SI+
	JE	CODE50_SI
	CMP	AL,0FH	;DI+
	JE	CODE50_DI
	JMP	ERR6

;CODE50_BX:
	MOV	CL,00H
	JMP	CODE50_.10
CODE50_BP:
	MOV	CL,010B
CODE50_.10:
	PUSH	CX
	CALL	CODE10
	POP	CX
CODE50_.05:
	CMP	AL,0EH;SI
	JE	CODE50_.20
	INC	CL
	CMP	AL,0FH;DI
	JE	CODE50_.20
	CMP	AL,50H
	JE	CODE50_.30
	JMP	ERR6
CODE50_.20:
	MOV	AL,[SI]
	CMP	AL,']'
	JNE	ERR6
	INC	SI
	ADD	CL,30H
	MOV	CH,CL
	JMP	CODE90
CODE50_.30:
	MOV	CL,00110B
	JMP	CODE50_DISP.10

;
CODE50_BX:
	MOV	CL,111B
	JMP	CODE50_DISP

CODE50_SI:
	MOV	CL,100B
	JMP	CODE50_DISP

CODE50_DI:
	MOV	CL,101B


CODE50_DISP:
	PUSH	CX
	CALL	CODE10
	POP	CX
	CMP	AL,50H
	JE	CODE50_DISP.10
	CMP	CL,111B	;BX
	JNE	ERR6
	MOV	CL,000B
	JMP	CODE50_.05
CODE50_DISP.10:
	MOV	AL,[SI]
	CMP	AL,']'
	JNE	ERRB
	INC	SI

	ADD	CL,30H+10000B
	MOV	CH,CL
	JMP	CODE90

;
CODE10A:
	;CALL	CODE10
	MOV	AL,[PRE_SIZE]
	PUSH	AX
	MOV	AL,[FLG2.386]
	MOV	AH,[FLG2.DWORD]
	PUSH	AX
	CALL	CODE10
	POP	BX
	POP	DX

	PUSH	AX
	MOV	AL,[SI]
	CMP	AL,'['
	POP	AX
	JNE	CODE10A.E
	INC	SI

	MOV	[FLG2.386],BL
	MOV	[FLG2.DWORD],BH
	MOV	[PRE_SIZE],DL


	MOV	CH,AL

	CMP	AL,0CH	;ESP
	JE	CODE10A.ESP

	CMP	AL,50H
	JNE	CODE10A.10
	MOV	CH,101B
	JMP	CODE10A.15

CODE10A.ESP:
	PUSH	CX
	CALL	CODE10
	POP	CX
	CMP	AL,50H
	JNE	ERR6

	CMP	BYTE [SI],']'
	JNE	ERR6
	INC	SI

	MOV	BYTE [MOD2],24H
	MOV	AL,30H+10100B
	JMP	CODE10A.E

CODE10A.10:
	CMP	AL,08H
	JB	ERR6
	CMP	AL,10H
	JNB	ERR6
	SUB	CH,08H
CODE10A.15:
	MOV	AL,[PRE_SIZE]
	PUSH	AX
	MOV	AL,[FLG2.386]
	MOV	AH,[FLG2.DWORD]
	PUSH	AX

	PUSH	CX
	CALL	CODE10
	POP	CX

	POP	BX
	MOV	[FLG2.DWORD],BH
	MOV	[FLG2.386],BL
	POP	BX
	MOV	[PRE_SIZE],BL

	CMP	AL,08H
	JB	ERR6
	CMP	AL,10H
	JNB	ERR6

	MOV	BL,[SI]
	CMP	BL,'*'
	JE	CODE10A.M

CODE10A.50:
	MOV	CL,0

	MOV	BL,[SI]
	INC	SI
	CMP	BL,']'
	JE	CODE10A.80

	DEC	SI
	PUSH	AX
	PUSH	CX
	CALL	CODE10
	CMP	AL,50H
	JNE	ERR6
	MOV	AL,[SI]
	INC	SI
	CMP	AL,']'
	JNE	ERR6
	POP	CX
	POP	AX
	MOV	CL,00010000B	;+nnnn

CODE10A.80:
	SUB	AL,08H
	SHL	AL,3
	OR	CH,AL
	MOV	AH,CH		;2nd
	MOV	[MOD2],AH

	MOV	AL,00100B	;[+0]
	OR	AL,CL
	ADD	AL,30H

CODE10A.E:
	MOV	CH,AL
	JMP	CODE90

CODE10A.M:
	PUSH	AX
	INC	SI
	MOV	AL,[SI]
	INC	SI
	MOV	AH,0
	CMP	AL,'1'
	JE	CODE10A.M.10
	MOV	AH,01000000B
	CMP	AL,'2'
	JE	CODE10A.M.10
	MOV	AH,10000000B
	CMP	AL,'4'
	JE	CODE10A.M.10
	MOV	AH,11000000B
	CMP	AL,'8'
	JE	CODE10A.M.10
	JMP	ERR6
CODE10A.M.10:
	OR	CH,AH

	POP	AX
	JMP	CODE10A.50
	

;

CODE10:	MOV	[PNT],SI
	MOV	DX,WORK2+1
	MOV	CH,40
	MOV	AL,[SI]
	CMP	AL,'9'+1
	JNB	CODE11
	CMP	AL,'+'	;#
	JE	CD90
	CMP	AL,'-'
	JE	CD90
	CMP	AL,27H
	JE	CD90
	CMP	AL,'$'
	JE	CD90
	CMP	AL,'0'
	JB	CODE11
CD90:	CALL	GET.NO
	MOV	CH,50H
	JMP	CODE90

CODE11:	MOV	AL,[SI]
	CMP	AL,'}'
	JE	CODE12
	CMP	AL,'['
	JE	CODE12	;#
	CMP	AL,']'
	JE	CODE12
	CMP	AL,'@'
	JNB	CDE110
	OR	AL,AL
	JE	CODE12
	CMP	AL,09H
	JE	CODE12
	CMP	AL,' '
	JE	CODE12
	CMP	AL,';'
	JE	CODE12
	CMP	AL,','
	JE	CODE12
	CMP	AL,'*'
	JE	CODE12	;#
	CMP	AL,'+'
	JE	CODE12
	CMP	AL,'-'
	JE	CODE12
CDE110:	CALL	UPPER
	CALL	LDDXA
	INC	SI
	INC	DX
	DEC	CH
	JNE	CODE11
	JMP	ERR6
CODE12:	MOV	AL,40
	SUB	AL,CH
	MOV	[LEN],AL

CODE02:	MOV	AL,[LEN]
	MOV	CL,AL
	CMP	AL,1
	JNE	CODE15

;

	MOV	AL,CL
CODE15:
	CMP	AL,3
	JNB	CODEL3

	MOV	BX,C.DAT2
	MOV	CH,00H
CODE16:	MOV	DX,WORK2+1
	CALL	LDADX

	CMP	AL,[BX]
	PUSHF
	INC	BX
	INC	DX
	POPF
	JNE	CODE18
	CALL	LDADX

	CMP	AL,[BX]
	JE	CODE18.50
CODE18:	INC	BX
	INC	CH
	MOV	AL,CH
	CMP	AL,14H
	JNE	CODE16

	JMP	CODEL3


CODE18.50:
	CMP	CH,08H
	MOV	AL,1
	JB	CODE18.52
	MOV	AL,2
CODE18.52:
	MOV	[PRE_SIZE],AL

	CMP	CH,08H
	JB	CODE18.54
	CMP	CH,10H
	JNB	CODE18.54
	MOV	AL,00H
	MOV	[FLG2.DWORD],AL
CODE18.54:
	JMP	CODE20
;--------------
CODEL3:
	MOV	AL,CL

	CMP	AL,4
	JNB	CODEL4

	CMP	BYTE [WORK2+3],':'
	JNE	CODEL3.SEG.E

	MOV	AX,[WORK2+1]
	CMP	AX,'SC'
	MOV	BL,2EH
	JE	CODEL3.SEG.10
	CMP	AX,'SD'
	MOV	BL,3EH
	JE	CODEL3.SEG.10
	CMP	AX,'SE'
	MOV	BL,26H
	JE	CODEL3.SEG.10
	CMP	AX,'SS'
	MOV	BL,36H
	JE	CODEL3.SEG.10
	JMP	CODEL3.SEG.E

CODEL3.SEG.10:
	MOV	[PRE_SEG],BL
	CALL	OPCODE
	RET

PRE_SEG:DS	1

CODEL3.SEG.E:

	MOV	BX,C.DAT3	;EAX..
	MOV	CH,08H
CODEL3.10:
	PUSH	BX

	MOV	DX,WORK2+1
	CALL	LDADX

	CMP	AL,[BX]
	JNE	CODEL3.20

	INC	BX
	INC	DX
	CALL	LDADX

	CMP	AL,[BX]
	JNE	CODEL3.20

	INC	BX
	INC	DX
	CALL	LDADX

	PUSH	BX
	MOV	BL,[BX]
	CMP	AL,BL
	POP	BX
	JE	CODEL3.50

CODEL3.20:
	POP	BX
	INC	BX
	INC	BX
	INC	BX
	INC	CH
	MOV	AL,CH
	CMP	AL,10H
	JNE	CODEL3.10

	PUSH	SI
	PUSH	DI
	MOV	SI,WORK2+1
	MOV	DI,STR_FAR
	CALL	STRCMP
	POP	DI
	POP	SI
	JE	CODE_FAR

	JMP	CODEL4

CODE_FAR:
	MOV	BYTE [FLG2.FAR],0FFH
	CALL	OPCODE
	RET

STR_FAR:DB	3,'FAR'



CODEL3.50:
	POP	BX

	MOV	AL,0FFH
	MOV	[FLG2.DWORD],AL
	MOV	AL,4
	MOV	[PRE_SIZE],AL
	JMP	CODE20

;

CODEL4:
	MOV	AL,CL

	CMP	AL,5
;	JNB	CODE19B
	JNB	CODEL5

	PUSH	SI
	PUSH	DI
	MOV	SI,WORK2+1
	MOV	DI,STR_BYTE
	CALL	STRCMP
	POP	DI
	POP	SI
	JE	CODE_BYTE

	PUSH	SI
	PUSH	DI
	MOV	SI,WORK2+1
	MOV	DI,STR_WORD
	CALL	STRCMP
	POP	DI
	POP	SI
	JE	CODE_WORD

	JMP	CODE19B

CODE_BYTE:
	XOR	AL,AL
	MOV	[FLG2.DWORD],AL
	MOV	AL,1
	MOV	[PRE_SIZE],AL
	CALL	OPCODE
	RET

CODE_WORD:
	XOR	AL,AL
	MOV	[FLG2.DWORD],AL
	MOV	AL,2
	MOV	[PRE_SIZE],AL
	CALL	OPCODE
	RET


CODEL5:
	MOV	AL,CL
	CMP	AL,6
	JNB	CODE19B

	PUSH	SI
	PUSH	DI
	MOV	SI,WORK2+1
	MOV	DI,STR_DWORD
	CALL	STRCMP
	POP	DI
	POP	SI
	JE	CODE_DWORD

	PUSH	SI
	PUSH	DI
	MOV	SI,WORK2+1
	MOV	DI,STR_SHORT
	CALL	STRCMP
	POP	DI
	POP	SI
	JE	CODE_SHORT

	JMP	CODE19B

CODE_DWORD:
	MOV	AL,4
	MOV	[PRE_SIZE],AL
	MOV	AL,0FFH
	MOV	[FLG2.DWORD],AL
	CALL	OPCODE
	RET

CODE_SHORT:
	;MOV	AL,0
	MOV	AL,0FFH
	MOV	[FLG2.SHORT],AL
	CALL	OPCODE
	RET


;----------------

CODE19B:
	XOR	EBX,EBX
	MOV	[VAL1],EBX
	MOV	SI,[PNT]
	CALL	GET.NO
CODE1A:
	DEC	SI
	CALL	L.SKIP
	MOV	CH,50H
	JMP	CODE90

CODE20:

CODE90:	MOV	AL,CH
	OR	AL,AL
	RET
CODE99:	MOV	AL,0FFH
	STC
	RET

C.DAT2:
;

	DB	'AL';0
	DB	'CL'
	DB	'DL'
	DB	'BL'
	DB	'AH'
	DB	'CH'
	DB	'DH'
	DB	'BH'

	DB	'AX';8
	DB	'CX'
	DB	'DX'
	DB	'BX'
	DB	'SP'
	DB	'BP'
	DB	'SI'
	DB	'DI'

	DB	'ES'
	DB	'CS'
	DB	'SS'
	DB	'DS'

C.DAT3:

	DB	'EAX';8
	DB	'ECX'
	DB	'EDX'
	DB	'EBX'
	DB	'ESP'
	DB	'EBP'
	DB	'ESI'
	DB	'EDI';F

;

MAIN20:
	DEC	SI
	CALL	S.SKIP
	JNE	ERR6

MAIN50:	MOV	BX,[LIN.NO]
	INC	BX
	MOV	[LIN.NO],BX
;
	JMP	MAIN01

;
;
;
PUTLIN:	MOV	BX,L.DATA
LOOP2:	MOV	AL,[BX]
	OR	AL,AL
	JE	_RET
	CMP	AL,1AH
	JE	_RET
	INC	BX
	CALL	DOS02
	JMP	LOOP2

;
;	AL:code
;
;
;	?none
;

SETDAT:
	PUSH	EBX
	MOV	EBX,[O.ADR2]
;
	INC	EBX
	MOV	[O.ADR2],EBX

	PUSH	AX
	MOV	AL,[PASS]
	AND	AL,1
	POP	AX
	JNE	SETDAT.10

	PUSHAD
	CALL	PUTCHR
	POPAD
SETDAT.10:
	MOV	EBX,[O.ADR1]
	INC	EBX
	MOV	[O.ADR1],EBX

	MOV	EBX,[O.BYTE]
	INC	EBX
	MOV	[O.BYTE],EBX
	POP	EBX
	RET

;
;
;
S.SKIP:	INC	SI
S.SKP2:	MOV	AL,[SI]
	CMP	AL,' '
	JE	S.SKIP
	CMP	AL,09H
	JE	S.SKIP
	OR	AL,AL
	JE	_RET
	CMP	AL,';'
	RET

;
;
;
L.SKIP:	INC	SI
	MOV	AL,[SI]
	OR	AL,AL
	JE	_RET
	CMP	AL,09H
	JE	_RET
	CMP	AL,' '
	JE	_RET
	CMP	AL,';'
	JE	_RET

	CMP	AL,'['	;#
	JE	_RET

	CMP	AL,']'
	JE	_RET
	CMP	AL,','
	JE	_RET
	JMP	L.SKIP

;-------------------------
GET.NO:
	XOR	EBX,EBX
	MOV	[VAL1],EBX
	CALL	GET.NO_ADD
	MOV	[VAL1],EBX
	OR	AL,AL
	RET

GET.NO_ADD:
	CALL	GET.NO_MULT
GET.NO_ADD.1:
	MOV	AL,[SI]
	CMP	AL,'+'
	JNE	GET.NO_SUB
	INC	SI
	PUSH	EBX
	CALL	GET.NO_MULT
	POP	EDX
	ADD	EBX,EDX
	JMP	GET.NO_ADD.1
GET.NO_SUB:
	CMP	AL,'-'
	JNE	_RET
	INC	SI
	PUSH	EBX
	CALL	GET.NO_MULT
	POP	EDX
	XCHG	EDX,EBX
	SUB	EBX,EDX
	JMP	GET.NO_ADD.1
;
;
GET.NO_MULT:
	CALL	GET.NO_FACT
GET.NO_MULT.1:
	MOV	AL,[SI]
	CMP	AL,'*'
	JNE	GET.NO_DIV
	INC	SI
	PUSH	EBX
	CALL	GET.NO_FACT
	POP	EDX
	CALL	MULT_HLDE
	JMP	GET.NO_MULT.1
GET.NO_DIV:
	CMP	AL,'/'
	JNE	_RET
	INC	SI
	PUSH	EBX
	CALL	GET.NO_FACT
	XCHG	EDX,EBX
	POP	EBX
	CALL	DIV_HLDE
	JMP	GET.NO_MULT.1

GET.NO_FACT:
	MOV	AL,[SI]
	CMP	AL,'+'
	JNE	GET.NO_FACT1
	INC	SI
	JMP	GET.NO_FACT2
GET.NO_FACT1:
	CMP	AL,'-'
	JNE	GET.NO_FACT2
	INC	SI
	CALL	GET.NO_FACT2
	NEG	EBX
	RET

GET.NO_FACT2:
	MOV	AL,[SI]
	CMP	AL,'{'
	JNE	GET.NO_FACT3
	INC	SI
	CALL	GET.NO_ADD
	MOV	AL,[SI]
	CMP	AL,'}'
	JNE	ERR6
	INC	SI
	OR	AL,AL
	RET
GET.NO_FACT3:
;
;

GET.NO_FACT5:
	MOV	AL,[SI]
	CMP	AL,' '
	JNE	GET.NO_FACT6
	INC	SI
	JMP	GET.NO_FACT5

GET.NO_FACT6:

	MOV	DX,WORK2+1
GN10:	MOV	AL,[SI]
	CMP	AL,27H
	JE	GETN60
	CMP	AL,'"'
	JE	GETN60
	CMP	AL,'$'
	JE	GETN70

	MOV	CH,40
GETN05:	MOV	AL,[SI]
	CMP	AL,';'
	JE	GETN20
	OR	AL,AL
	JE	GETN20
	CMP	AL,09H
	JE	GETN20
	CMP	AL,' '
	JE	GETN20
	CMP	AL,','
	JE	GETN20
	CMP	AL,'+'
	JE	GETN20
	CMP	AL,'-'
	JE	GETN20
	CMP	AL,'*'
	JE	GETN20
	CMP	AL,'/'
	JE	GETN20
	CMP	AL,'['	;#
	JE	GETN20
	CMP	AL,']'
	JE	GETN20
	CMP	AL,'}'
	JE	GETN20
GETN06:	CALL	UPPER
	CALL	LDDXA
	INC	SI
	INC	DX
	DEC	CH
	JNE	GETN05
	JMP	ERR6

GETN20:	MOV	AL,' '
	CALL	LDDXA
	MOV	AL,40
	SUB	AL,CH
	MOV	[WORK2],AL
	MOV	BX,WORK2+1
	MOV	AL,[BX]
	CMP	AL,'0'
	JB	GETN40
	CMP	AL,'9'+1
	JNB	GETN40
	XOR	AL,AL
	CALL	LDDXA
	DEC	DX
	CALL	LDADX

	XOR	EBX,EBX	;value
	CMP	AL,'H'
	JNE	GETN24

;	hex

	XOR	AL,AL
	CALL	LDDXA
	MOV	DX,WORK2+1

GETN21:	CALL	LDADX
	OR	AL,AL
	JE	GETN55
	CMP	AL,'A'
	JB	GETN22
	SUB	AL,7
GETN22:	SUB	AL,'0'
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,EBX
	JB	ERR7
	XOR	ECX,ECX
	MOV	CL,AL
	ADD	EBX,ECX
	JB	ERR7
	INC	DX
	JMP	GETN21

;	bin

GETN24:	CMP	AL,'B'
	JNE	GETN28
	XOR	AL,AL
	CALL	LDDXA
	MOV	DX,WORK2+1
	XOR	EBX,EBX
GETN25:	CALL	LDADX
	OR	AL,AL
	JE	GETN55
	SUB	AL,'0'
	CMP	AL,2
	JNB	ERR7
	ADD	EBX,EBX
	JB	ERR7
	XOR	ECX,ECX
	MOV	CL,AL
	ADD	EBX,ECX
	JB	ERR7
	INC	DX
	JMP	GETN25

;	decimal

GETN28:	MOV	DX,WORK2+1
	XOR	EBX,EBX
GETN29:	CALL	LDADX
	OR	AL,AL
	JE	GETN55
	CMP	AL,'9'+1
	JNB	ERR7
	SUB	AL,'0'
	ADD	EBX,EBX
	JB	ERR7
	MOV	ECX,EBX
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,EBX
	JB	ERR7
	ADD	EBX,ECX
	JB	ERR7
	XOR	ECX,ECX
	MOV	CL,AL
	ADD	EBX,ECX
	JB	ERR7
	INC	DX
	JMP	GETN29

GETN40:	MOV	BX,WORK2
	MOV	[PNT2],BX
	MOV	EBX,[VAL1]
	PUSH	EBX
	CALL	SRCHL
	JNB	GET45
	MOV	AL,[PASS]
	DEC	AL
	JNE	ERR9		;if label not found & PASS!=1
GET45:
	MOV	EDX,[VAL1]

	POP	EBX
	MOV	[VAL1],EBX
	XCHG	EDX,EBX
	JMP	GETN50

GETN55:

GETN50:
	OR	AL,AL
	RET

GETN60:	MOV	CL,AL
	INC	SI
	MOV	BX,0
	MOV	AL,[SI]
	CMP	AL,CL
	JE	ERR7
;
;
	CMP	AL,7FH
	JE	ERR7
	MOV	BH,AL
	INC	SI
	MOV	AL,[SI]
	CMP	AL,CL
	JE	GETN66
	MOV	BL,AL
	INC	SI
	MOV	AL,[SI]
	CMP	AL,CL
	JNE	ERR6
GETN65:	INC	SI
	JMP	GETN50

GETN66:	MOV	BL,BH
	MOV	BH,0
	JMP	GETN65

GETN70:	INC	SI
;	XOR	EBX,EBX
	MOV	EBX,[O.ADR1]
	JMP	GETN50

;---------------------

;
;	DX:label set adrs
;	WORK:data
;
;	>DX:label next pnt (when PASS 1)
;

SET.LBL:
	PUSH	ES
	MOV	AX,[LBL_SEG]
	MOV	ES,AX

	MOV	[LBL.PNT.NEXT],DX

	MOV	AL,[PASS]
	DEC	AL
	JNE	SET.LBL50	;if PASS!=1

	MOV	BX,WORK1
	CALL	HASH

	MOV	CH,0
	MOV	CL,AL
	ADD	CX,CX		;CX=AL*2
	MOV	BX,LBL.PNT.TOP
	ADD	BX,CX
	MOV	AL,[BX]
	INC	BX
	MOV	BH,[BX]
	OR	AL,BH
	JNE	SET.LBL10	;if [LBL.PNT.TOP+CX]!=0

	MOV	BX,LBL.PNT.TOP
	ADD	BX,CX

	MOV	[BX],DX		;[LBL.PNT.TOP+CX]=DX

	JMP	SET.LBL20

SET.LBL10:
	MOV	BX,LBL.PNT
	ADD	BX,CX
	MOV	DL,[BX]
	INC	BX
	MOV	DH,[BX]
	INC	DX		;DX=[LBL.PNT+CX]+1
	PUSH	BX
	PUSH	DS
	MOV	BX,[LBL.PNT.NEXT]
	MOV	AX,ES
	MOV	DS,AX
	MOV	AL,BL
	CALL	LDDXA
	INC	DX
	MOV	AL,BH
	CALL	LDDXA
	POP	DS
	POP	BX		;[DX]=[LBL.PNT.NEXT]

SET.LBL20:

	MOV	BX,LBL.PNT
	ADD	BX,CX
	MOV	DX,[LBL.PNT.NEXT]
	MOV	[BX],DL
	INC	BX
	MOV	[BX],DH		;[LBL.PNT+CX]=[LBL.PNT.NEXT]

SET.LBL50:
	MOV	BX,WORK1
	CALL	LDI		;set len

	MOV	AL,[PASS]
	DEC	AL
	JE	SET.LBL60	;if PASS==1
	ADD	DX,2
	JMP	SET.LBL70
SET.LBL60:
	PUSH	DS
	MOV	AX,ES
	MOV	DS,AX

	XOR	AL,AL
	CALL	LDDXA
	INC	DX
	CALL	LDDXA
	INC	DX
	POP	DS
SET.LBL70:
	MOV	AL,[WORK1]
	MOV	CH,0
	MOV	CL,AL
	ADD	CX,4		;CX=len+4;2
	CALL	LDIR

	POP	ES
	RET

;
;	[PNT2]:data adrs
;
;	>CF:0(found)/1:(not found)
;	>[VAL1]:value
;	>[PNT2]:top pnt
;
;	?AL
;

SRCHL:	PUSH	EBX
	PUSH	EDX
	PUSH	ECX

	PUSH	ES
	MOV	AX,[LBL_SEG]
	MOV	ES,AX

	MOV	BX,[PNT2]
	CALL	HASH

SRCHL.05:
	MOV	CH,0
	MOV	CL,AL
	MOV	BX,LBL.PNT.TOP
	ADD	BX,CX
	ADD	BX,CX
	MOV	AL,[BX]
	INC	BX
	MOV	BH,[BX]
	MOV	BL,AL		;BX=[LBL.PNT.TOP+AL*2]
	OR	AL,BH
	JE	SRCHL4		;if BX==0
SRCHL1:
	MOV	DX,[PNT2]
	XCHG	DX,BX
	MOV	AL,[BX]		;len
	XCHG	DX,BX

	CMP	AL,ES:[BX]

	PUSH	BX		;save top adrs
	PUSHF
	PUSH	AX
	INC	DX
	INC	BX


	MOV	CX,ES:[BX]	;CX=[BX+1] link pnt
	INC	BX
	INC	BX

	MOV	[LBL.PNT.NEXT],CX
	POP	AX
	POPF
	JNE	SRCHL3		;if len is different
	MOV	CH,AL

SRCHL2:	MOV	AL,ES:[BX]

	XCHG	DX,BX
	CMP	AL,[BX]
	XCHG	DX,BX
	JNE	SRCHL3	;if different letter
	INC	BX
	INC	DX
	DEC	CH
	JNE	SRCHL2

	MOV	EDX,ES:[BX]

	MOV	[VAL1],EDX	;[VAL1]=[BX] value
	POP	BX
	MOV	[PNT2],BX	;[PNT2]=BX top pnt

	POP	ES
	POP	ECX
	POP	EDX
	POP	EBX
	OR	AL,AL
	RET
SRCHL3:
	POP	BX

	MOV	BX,[LBL.PNT.NEXT]
	OR	BX,BX
	JE	SRCHL4
	JMP	SRCHL1
SRCHL4:
	POP	ES
	POP	ECX
	POP	EDX
	POP	EBX
	STC
	RET

;
HASH:
	PUSH	BX
	PUSH	CX

	MOV	CH,0
	MOV	CL,[BX]
	MOV	AH,0
HASH.10:
	INC	BX
	MOV	AL,[BX]
	ROL	AH,1
	XOR	AH,AL
	LOOP	HASH.10

	MOV	AL,AH
	POP	CX
	POP	BX
	RET


;---------------------------

GETLIN:	MOV	BX,L.DATA
	MOV	CH,0	;tab-flg
;	MOV	CL,0	;count
	MOV	DX,0
GETL02:	PUSH	DX
	PUSH	BX
	PUSH	CX
	CALL	GETCHR
	POP	CX
	POP	BX
	POP	DX
	JB	GETL25
;
;
	JMP	GETL10

	TEST	CH,1
	JNE	GETL10
	MOV	AL,' '
GETL10:	MOV	[BX],AL
;	INC	CL
;	JE	ERRD	;too long line
	INC	DX
	CMP	DX,LINESIZE
	JNB	ERRD

	CMP	AL,27H+1
	JB	GETL13
GETL12:	INC	BX
	JMP	GETL02
GETL13:
;
;
	CMP	AL,0DH
	JE	GETL20
	CMP	AL,1AH
	JE	GETL30
	JMP	GETL12
GETL15:	TEST	CH,1
	JNE	GETL16
	MOV	[QUOTATION],AL
	DEC	CH
	MOV	[BX],AL
	INC	BX
	JMP	GETL02
GETL16:	MOV	CH,AL
	MOV	AL,[QUOTATION]
	CMP	AL,CH
	JE	GETL17
	MOV	AL,CH
	MOV	[BX],AL
	INC	BX
	MOV	CH,0FFH
	JMP	GETL02
GETL17:	MOV	CH,00H
	MOV	[BX],AL
	INC	BX
	JMP	GETL02
GETL20:	PUSH	AX
	MOV	AL,00H
	MOV	[BX],AL
	POP	AX	;LD (HL),00H
	CALL	GETCHR
	RET
GETL25:	PUSH	AX
	MOV	AL,1AH
	MOV	[BX],AL
	POP	AX
GETL30:	INC	BX
	PUSH	AX
	MOV	AL,00H
	MOV	[BX],AL
	POP	AX
	RET

;-------------------------------

GETCHR:	MOV	BX,[S.LEFT]
	OR	BX,BX
	JE	GETC10
	DEC	BX
	MOV	[S.LEFT],BX
	MOV	BX,[S.PNT]
	MOV	AL,[BX]
	INC	BX
	MOV	[S.PNT],BX
	OR	AL,AL
	RET
GETC10:	MOV	AL,[FL.END]
	OR	AL,AL
	JNE	GETC20
GETC12:	MOV	DX,USRDMA
	MOV	[S.PNT],DX

	MOV	BX,[HDL]
	MOV	CX,R.BUF
	MOV	AX,3F00H	;read
	INT	21H
	MOV	[S.LEFT],AX
	CMP	AX,R.BUF
	MOV	AL,0
	JE	GETC15
	DEC	AL
GETC15:	MOV	[FL.END],AL
	JMP	GETCHR
GETC20:
	CALL	FCBDEC
	JB	_RET
	JMP	GETC12

;
;	AL:code
;
;	?AL,BX
;

PUTCHR:	PUSH	CX
	MOV	CL,AL
PUTC1:
	MOV	BX,[W.LEFT]
	OR	BX,BX
	JE	PUTC10
	DEC	BX
	MOV	[W.LEFT],BX
	MOV	BX,[W.PNT]
	MOV	[BX],CL
	INC	BX
	MOV	[W.PNT],BX
	POP	CX
	RET
PUTC10:
	PUSH	CX
	PUSH	DX
	MOV	BX,W.BUF
	MOV	[W.LEFT],BX

	MOV	DX,USRDMA+R.BUF
	MOV	[W.PNT],DX

	MOV	BX,[HDL2]
	MOV	CX,W.BUF
	MOV	AX,4000H	;write
	INT	21H
	POP	DX
	POP	CX
	JB	ERR3

	CMP	AX,W.BUF
	JNE	ERR3

	JMP	PUTC1

	JNB	PUTC1
	JMP	ERR3

;
;
;
FCBDEC:
	MOV	AL,[LOAD.F]
	SUB	AL,1
	JB	_RET
	MOV	[LOAD.F],AL

	MOV	BX,[FCB]
	MOV	DX,80
	SUB	BX,DX
	MOV	[FCB],BX

	MOV	BX,[BX+70]
	MOV	[LIN.NO],BX
	MOV	BX,0
	MOV	[S.LEFT],BX
	XOR	AL,AL
	MOV	[FL.END],AL

	PUSHA
	MOV	BX,[HDL]
	MOV	AX,3E00H	;close #
	INT	21H

	MOV	SI,[FCB]
	MOV	BX,[SI+72]
	MOV	[HDL],BX

	MOV	BX,[HDL]
	MOV	AX,4200H	;seek
	MOV	DX,[SI+74]
	MOV	CX,[SI+76]
	INT	21H
	POPA

	CLC
	RET

;
;
;
PUTH2:	MOV	AL,BH
	CALL	PUTH1
	MOV	AL,BL
	CALL	PUTH1
	RET

;
;
;
PUTH1:	PUSH	AX
	SHR	AX,4
	CALL	PUTHX
	POP	AX
PUTHX:	AND	AL,0FH
	CMP	AL,10
	JB	PUTHX1
	ADD	AL,7
PUTHX1:	ADD	AL,'0'
	CALL	DOS02
	RET
;
;
;
CRLF:	MOV	AL,0DH
	CALL	DOS02
	MOV	AL,0AH
	CALL	DOS02
	RET
;
;
;
PUTDC:	PUSH	SI
	MOV	SI,WORKDC
	MOV	CX,10000
	CALL	PUTDC5
	MOV	CX,1000
	CALL	PUTDC5
	MOV	CX,100
	CALL	PUTDC5
	MOV	CX,10
	CALL	PUTDC5
	MOV	AL,BL
	ADD	AL,'0'
	MOV	[SI],AL
	MOV	AL,'$'
	MOV	[WORKDC+5],AL
	MOV	DX,WORKDC
	MOV	CH,4
PUTDC1:	CALL	LDADX
	CMP	AL,'0'
	JNE	PUTDC2
	INC	DX
	DEC	CH
	JNE	PUTDC1
PUTDC2:	CALL	DOS09
	POP	SI
	RET

PUTDC5:	MOV	DL,-1
	OR	AL,AL
PUTDC6:	INC	DL
	SBB	BX,CX
	JNB	PUTDC6
	ADD	BX,CX
	MOV	AL,DL
	ADD	AL,'0'
	MOV	[SI],AL
	INC	SI
	RET

;
;
;
UPPER:	CMP	AL,'a'
	JB	_RET
	CMP	AL,'z'+1
	JNB	_RET
	SUB	AL,20H
	RET

;-------------------------

MULT_HLDE:
	MOV	EAX,EBX
	MUL	EDX
	MOV	EBX,EAX

	RET

;
;
;

DIV_HLDE:
	PUSH	ECX
	PUSH	EAX
	MOV	EAX,EBX
	OR	EDX,EDX
	JE	DIV_HLDE.10

	MOV	ECX,EDX
	XOR	EDX,EDX
	DIV	ECX
	MOV	EBX,EAX
	POP	EAX
	POP	ECX
	RET

DIV_HLDE.10:
	MOV	EBX,0FFFFFFFFH
	POP	EAX
	POP	ECX
	RET

;
;
;
DOS02:	PUSHA
	MOV	AH,02H
	MOV	DL,AL
	INT	21H
	POPA
	RET

DOS09:	PUSH	AX
	MOV	AH,09H
	INT	21H
	POP	AX
	RET

DOS0F:	MOV	AX,3D00H
	INT	21H
	RET

DOS10:	MOV	AX,3E00H
	INT	21H
	RET

DOS16:	MOV	AX,3C00H
	INT	21H
	RET

DOS26:	MOV	AX,4000H
	INT	21H
	RET

DOS27:	MOV	AX,3F00H
	INT	21H
	RET

ERR0:	MOV	DX,EMES0
	JMP	ERR_STOP

ERR1:	MOV	DX,EMES1
	JMP	ERR_STOP

ERR2:	MOV	DX,EMES2
	JMP	ERR_STOP

ERR3:	MOV	DX,EMES3
	JMP	ERR_STOP

ERR4:	MOV	DX,EMES4
	JMP	ERR_CONT

ERR5:	MOV	DX,EMES5
	JMP	ERR_CONT

ERR6:	MOV	DX,EMES6
	JMP	ERR_CONT

ERR7:	MOV	DX,EMES7
	JMP	ERR_CONT

ERR8:	MOV	DX,EMES8
	JMP	ERR_STOP

ERR9:	MOV	DX,EMES9
	JMP	ERR_CONT

ERRA:	MOV	DX,EMESA
	JMP	ERR_CONT

ERRB:	MOV	DX,EMESB
	JMP	ERR_CONT

ERRC:	MOV	DX,EMESC
	JMP	ERR_STOP

ERRD:	MOV	DX,EMESD
	JMP	ERR_STOP

;
;
;
ERR_STOP:
	CALL	ERRSUB
	MOV	AL,[FLAG_FILE2]
	OR	AL,AL
	JE	ERR_STOP.10

	MOV	BX,[HDL2]
	MOV	AX,3E00H
	INT	21H

ERR_STOP.10:
	MOV	AH,4CH
	INT	21H

ERR_CONT:
	CALL	ERRSUB
	MOV	SP,[STACK]
	JMP	MAIN50

;
;
;
ERRSUB:
	PUSH	DX

	MOV	BX,[LIN.NO]
	CALL	PUTDC
	MOV	AL,':'
	CALL	DOS02
	POP	DX
	CALL	DOS09
	MOV	AL,' '
	CALL	DOS02
	CALL	PUTLIN
	CALL	CRLF
	RET

;
;
;

STRCPY:	CLD
STRCPY.10:
	LODSB
	CMP	AL,20H
	JE	STRCPY.20
	CMP	AL,'/'
	JE	STRCPY.20
	STOSB
	OR	AL,AL
	JNE	STRCPY.10
	RET

STRCPY.20:
	XOR	AL,AL
	STOSB
	RET

;
;
STRCAT:
	LODSB
	OR	AL,AL
	JNE	STRCAT
	DEC	SI

	XCHG	SI,DI
STRCAT.10:
	LODSB
	STOSB
	OR	AL,AL
	JNE	STRCAT.10
	RET

;
LDDXA:	XCHG	DX,BX
	MOV	[BX],AL
	XCHG	DX,BX
	RET

;
LDADX:	XCHG	DX,BX
	MOV	AL,[BX]
	XCHG	DX,BX
	RET
;
LDI:	PUSH	SI
	PUSH	DI

	MOV	SI,BX
	MOV	DI,DX
	CLD
	MOVSB
	MOV	BX,SI
	MOV	DX,DI

	POP	DI
	POP	SI
	RET


;
LDIR:	PUSH	SI
	PUSH	DI

	MOV	SI,BX
	MOV	DI,DX
	CLD
	REP
	MOVSB
	MOV	BX,SI
	MOV	DX,DI

	POP	DI
	POP	SI
	RET

;

_RET:	RET


EMES0:	DEFM	'Read file open error$'
EMES1:	DEFM	'Read file read error$'
EMES2:	DEFM	'Write file make error$'
EMES3:	DEFM	'Write file write error$'
EMES4:	DEFM	'Label error$'
EMES5:	DEFM	'Multiply Defined label$'
EMES6:	DEFM	'Format error$'
EMES7:	DEFM	'Number error$'
EMES8:	DEFM	'Label table full$'
EMES9:	DEFM	'Undefined label$'
EMESA:	DEFM	'Reference error$'
EMESB:	DEFM	'Operand error$'
EMESC:	DEFM	'Include error$'
EMESD:	DEFM	'Too long line$'

MES1:	DEFM	'==== 8086 Self Assembler ===='
	DEFB	0DH,0AH
	DEFM	'       Programed by djnz80a'
	DEFB	0DH,0AH,'$'
MES2:	DEFM	'Pass...$'


STR_ASM:DB	'.ASM',0

STR_COM:DB	'.COM',0

;-----
WORK:

LBL_SEG:DS	4

PASS:	DEFS	1

LIN.NO:	DEFS	2
LBL.NO:	DEFS	2
LBL.NX:	DEFS	2
ERR.NO:	DEFS	2

ORG.ADR:DEFS	4
O.ADR1:	DEFS	4
O.ADR2:	DEFS	4
O.BYTE:	DEFS	4

FLG.1:	DEFS	1
FLG.2:	DEFS	1
FLG.3:	DEFS	1
FLG.R:	DS	1;use short jmp
FLG.L:	DS	1
FLG.P:	DS	1;display line

FLG.D:	DS	1;debug symbol

FLG.386:DS	1
FLG.DWORD:DS	1
FLG.SHORT:DS	1

FLG2.386:DS	1
FLG2.DWORD:DS	1

FLG2.SHORT:DS	1

FLG2.FAR:DS	1

PRE_SIZE:DS	1
PRE_SIZE1:DS	1
PRE_SIZE2:DS	2

S.LEFT:	DEFS	2
S.PNT:	DEFS	2
FL.END:	DEFS	1

W.LEFT:	DEFS	2
W.PNT:	DEFS	2

PNT:	DEFS	2
PNT2:	DEFS	2

VAL1:	DS	4
VAL2:	DS	4

F.TYPE:	DEFS	1

MOD2:	DS	1

L.DATA:
;	DEFS	260
	DS	LINESIZE+20

TABFLG:	DEFS	1

;SGN:	DEFS	1
LEN:	DEFS	1
WORK1:	DEFS	80
WORK2:	DEFS	80
WORKDC:	DEFS	6

FLAG_FILE2:DB	00H

HDL:	DS	2
HDL2:	DS	2

LOAD.F:	DEFS	2	;including file no.
FCB:	DEFS	2	;pointer to fcb

FILE2:
	DS	80;100	;write file
	DB	'T.COM',0

FILE1:
	DS	80;100	;read file
	DB	'T.ASM',0

	DEFS	270H	;for 16 files

STACK:	DS	2

QUOTATION:
	DS	1

LBL.PNT.NEXT:
	DS	2

LBL.PNT.TOP:
	DS	200H;100H*2

LBL.PNT:
	DS	200H;100H*2

USRDMA:

	END

